{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fenv","text":"<p>Fenv is a simple and efficient tool to help you manage your virtual environments and create basic Python files with a single command. With Fenv, you can quickly generate a new project folder, establish a virtual environment within that folder, and simultaneously create the essential basic Python files all in one go. This tool is ideal for developers who frequently work on multiple Python projects and want a simple, streamlined solution for managing virtual environments.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate a new project folder with a single command</li> <li>Quickly establish a virtual environment within the project folder</li> <li>Simultaneously create essential basic Python files</li> <li>Ideal for developers who work on multiple Python projects</li> <li>Add <code>black</code> for format python</li> <li>Packages can be installed and uninstalled and added to files. <code>requirements.txt</code> at the same time</li> </ul>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"how-to-guides/","title":"How-To Guides","text":""},{"location":"how-to-guides/#installation","title":"Installation","text":"<p>To install Fenv, simply run the following command:</p> <pre><code>pip install fenv\n</code></pre>"},{"location":"how-to-guides/#usage","title":"Usage","text":"<p>Fenv makes it easy to get started with a new Python project by providing an all-in-one solution. Here's how to use it:</p>"},{"location":"how-to-guides/#create-a-new-project-folder","title":"Create a new project folder:","text":"<pre><code>fenv new &lt;project_folder&gt;\n</code></pre>"},{"location":"how-to-guides/#activate-the-virtual-environment","title":"Activate the virtual environment:","text":""},{"location":"how-to-guides/#for-windows","title":"for windows","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"how-to-guides/#for-linux","title":"for linux","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"how-to-guides/#command-for-windows-only","title":"Command for windows only","text":""},{"location":"how-to-guides/#install-packages","title":"Install packages","text":"<pre><code>fenv install &lt;package_name&gt;\n</code></pre> <p>Install the package and add it to requirements.txt If the package name is omitted, the message <code>Maybe you forgot to put the name of the package to install? for example fenv install &lt;package_name&gt;</code> is displayed.</p>"},{"location":"how-to-guides/#install-packages_1","title":"Install packages","text":"<pre><code>fenv uninstall &lt;package_name&gt;\n</code></pre> <p>Install the package and add it to requirements.txt</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#fenv.fenv.bcolors","title":"bcolors","text":"<pre><code>bcolors()\n</code></pre> <p>It's a class that contains a bunch of variables that are strings of ANSI escape codes.</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def __init__(self):\n    self.HEADER = \"\"\n    self.OKBLUE = \"\"\n    self.OKGREEN = \"\"\n    self.WARNING = \"\"\n    self.FAIL = \"\"\n    self.ENDC = \"\"\n</code></pre>"},{"location":"reference/#fenv.fenv.add_module_to_txt","title":"add_module_to_txt","text":"<pre><code>add_module_to_txt(args)\n</code></pre> <p>It takes the argument from the command line and adds it to the requirements.txt file</p> <p>:param args: The arguments passed to the script</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def add_module_to_txt(args):\n\"\"\"\n    It takes the argument from the command line and adds it to the requirements.txt file\n\n    :param args: The arguments passed to the script\n    \"\"\"\n    os.system(f\"pip freeze &gt; requirements.txt\")\n    print(notice + f'Successfully module {args.install} added to \"requirements.txt\"')\n</code></pre>"},{"location":"reference/#fenv.fenv.check_command","title":"check_command","text":"<pre><code>check_command(args)\n</code></pre> <p>It checks the command that the user has entered and then runs the appropriate function</p> <p>:param args: The arguments passed to the script</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def check_command(args):\n\"\"\"\n    It checks the command that the user has entered and then runs the appropriate function\n\n    :param args: The arguments passed to the script\n    \"\"\"\n    if args.__dict__[\"command\"] == \"new\":\n        run_cmd_new(args)\n    elif args.__dict__[\"command\"] == \"install\":\n        run_cmd_install(args) if args.install != None else print(\n            \"Maybe you forgot to put the name of the package to install? for example\"\n            + \" `\"\n            + bcolors.OKGREEN\n            + \"fenv install\"\n            + bcolors.OKBLUE\n            + \" &lt;package_name&gt;\"\n            + bcolors.ENDC\n            + \"`\"\n        )\n    elif args.__dict__[\"command\"] == \"uninstall\":\n        run_cmd_uninstall(args) if args.uninstall != None else print(\n            \"Maybe you forgot to put the name of the package to uninstall? for example\"\n            + \" `\"\n            + bcolors.OKGREEN\n            + \"fenv uninstall\"\n            + bcolors.OKBLUE\n            + \" &lt;package_name&gt;\"\n            + bcolors.ENDC\n            + \"`\"\n        )\n    elif args.__dict__[\"command\"] == \"update\":\n        os.system(\"pip freeze &gt; requirements.txt\")\n        print(notice + \"Updated module all to requirements.txt\")\n    elif args.__dict__[\"command\"] == \"onlyenv\":\n        run_cmd_onlyenv()\n\n    elif args.__dict__[\"command\"] == \"clean\":\n        run_cmd_clean()\n</code></pre>"},{"location":"reference/#fenv.fenv.cmd_install_package","title":"cmd_install_package","text":"<pre><code>cmd_install_package(args)\n</code></pre> <p>It installs a package using pip</p> <p>:param args: The arguments passed to the command</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def cmd_install_package(args):\n\"\"\"\n    It installs a package using pip\n\n    :param args: The arguments passed to the command\n    \"\"\"\n    try:\n        if platform.system() == \"Windows\":\n            os.system(\n                f\".\\{name_env()}\\Scripts\\python.exe -m pip install {args.install}\"\n            )\n            print(notice + f\"Successfully installed module {args.install}\")\n    except TimeoutError:\n        print(TimeoutError)\n</code></pre>"},{"location":"reference/#fenv.fenv.cmd_uninstall_package","title":"cmd_uninstall_package","text":"<pre><code>cmd_uninstall_package(args)\n</code></pre> <p>It uninstalls a package from the virtual environment</p> <p>:param args: The arguments passed to the command</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def cmd_uninstall_package(args):\n\"\"\"\n    It uninstalls a package from the virtual environment\n\n    :param args: The arguments passed to the command\n    \"\"\"\n    try:\n        if platform.system() == \"Windows\":\n            os.system(\n                f\".\\{name_env()}\\Scripts\\python.exe -m pip uninstall {args.uninstall}\"\n            )\n            print(notice + f\"Successfully uninstalled module {args.uninstall}\")\n    except TimeoutError:\n        print(TimeoutError)\n</code></pre>"},{"location":"reference/#fenv.fenv.create_dir_file","title":"create_dir_file","text":"<pre><code>create_dir_file(path, text)\n</code></pre> <p>It creates a directory if it doesn't exist, and then creates a file in that directory with the given text</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file you want to create</p> required <code>text</code> <code>str</code> <p>The text to be written to the file</p> required Example <pre><code>create_dir_file(\".vscode/settings.json\", text_vscode.format(name_env=env_path))\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_dir_file(path, text):\n\"\"\"It creates a directory if it doesn't exist, and then creates a file in that directory with the given\n    text\n\n    Args:\n        path (str): The path to the file you want to create\n        text (str): The text to be written to the file\n\n    Example:\n        ```py\n        create_dir_file(\".vscode/settings.json\", text_vscode.format(name_env=env_path))\n        ```\n    Return:\n        None\n    \"\"\"\n    os.makedirs(os.path.dirname(path), exist_ok=True)\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        f.write(text)\n</code></pre>"},{"location":"reference/#fenv.fenv.create_file_base","title":"create_file_base","text":"<pre><code>create_file_base(name)\n</code></pre> <p>It creates a file called main.py and writes a function called main() inside of it</p> <p>:param name: The name of the project</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_file_base(name):\n\"\"\"\n    It creates a file called main.py and writes a function called main() inside of it\n\n    :param name: The name of the project\n    \"\"\"\n\n    def create_file_main_py():\n\"\"\"\n        It creates a file called main.py and writes a function called main() inside of it\n        \"\"\"\n\n        file_path = \"main.py\"\n        command = \"\"\"\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n    \"\"\"\n        with open(file_path, \"w\") as f:\n            f.write(command)\n        os.chmod(file_path, 0o777)\n        print(notice + f'Successfully created the file \"{file_path}\"')\n\n    def create_file_readme_md():\n\"\"\"\n        It creates a file called readme.md and writes the markdown text to it\n        \"\"\"\n        markdown_path = \"readme.md\"\n        markdown = \"\"\"\n# {}\n\nA brief and descriptive title for your project.\n\n## Description\n\nA detailed description of the project, including its purpose, features, and any other relevant information.\n\n## Getting Started\n\n```\npip install -r requirements.txt\n```\n\n## Usage\n\nInstructions on how to use the project, including any usage examples and screenshots.\n\n## Contributing\n\nIf you would like to contribute to the project, include a section on how to do so, including any guidelines and best practices.\n\n## License\n\nInclude information about the license used for the project, such as the name of the license (e.g. MIT, Apache 2.0, etc.) and a link to the license text.\n\n\"\"\"\n        with open(markdown_path, \"w\") as f:\n            f.write(markdown.format(name))\n        os.chmod(markdown_path, 0o777)\n        print(notice + f'Successfully created the file \"{markdown_path}\"')\n\n    def create_file_freeze():\n\"\"\"\n        It creates a file called \"requirements.txt\" and writes the string \"black\" to it\n        \"\"\"\n\n        module_base = \"\"\"black\"\"\"\n        with open(\"requirements.txt\", \"w\") as f:\n            f.write(module_base)\n        os.chmod(\"requirements.txt\", 0o777)\n        print(notice + f'Successfully created the file \"requirements.txt\"')\n\n    create_file_main_py()\n    create_file_readme_md()\n    create_file_freeze()\n</code></pre>"},{"location":"reference/#fenv.fenv.create_folder","title":"create_folder","text":"<pre><code>create_folder(folder_name)\n</code></pre> <p>It creates a folder with the name of the argument passed to it</p> <p>:param folder_name: The name of the folder you want to create :return: 1</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_folder(folder_name):\n\"\"\"\n    It creates a folder with the name of the argument passed to it\n\n    :param folder_name: The name of the folder you want to create\n    :return: 1\n    \"\"\"\n    try:\n        os.mkdir(folder_name)\n    except FileExistsError:\n        print(notice + f\"{folder_name} already exists.\")\n        return 1\n    else:\n        print(notice + f'Successfully created the directory \"{folder_name}\"')\n</code></pre>"},{"location":"reference/#fenv.fenv.create_project_all","title":"create_project_all","text":"<pre><code>create_project_all(args, name)\n</code></pre> <p>It creates a folder, creates a virtual environment, creates a settings file for VSCode, and creates a base file for the project</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_project_all(args, name):\n\"\"\"\n    It creates a folder, creates a virtual environment, creates a settings file for VSCode, and creates\n    a base file for the project\n    \"\"\"\n\n    if create_folder(name) != 1:\n        print(notice + \"Creating...\")\n        create_virtualenv(name)\n        create_setting_vscode(name)\n        create_file_base(name)\n        run_install_module_base(name)\n</code></pre>"},{"location":"reference/#fenv.fenv.create_setting_vscode","title":"create_setting_vscode","text":"<pre><code>create_setting_vscode(env_path)\n</code></pre> <p>It creates a file called <code>settings.json</code> in a directory called <code>.vscode</code> in the current directory.</p> <p>The file contains a JSON object with two keys: <code>python.formatting.provider</code> and <code>python.pythonPath</code>.</p> <p>The value of the first key is <code>black</code> and the value of the second key is the path to the virtual environment.</p> <p>The third key is <code>editor.formatOnSave</code> and its value is <code>true</code>.</p> <p>The function prints a message to the console when it's done.</p> <p>The function is called in the <code>create_env</code> function.</p> <p>The <code>create_env</code> function is called in the <code>main</code> function.</p> <p>The <code>main</code> function is called when the script is run.</p> <p>The <code>create_env</code> function is called with the name of the virtual environment as an argument.</p> <p>The</p> <p>:param env_path: The path to the virtual environment</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_setting_vscode(env_path):\n\"\"\"\n    It creates a file called `settings.json` in a directory called `.vscode` in the current directory.\n\n    The file contains a JSON object with two keys: `python.formatting.provider` and `python.pythonPath`.\n\n\n    The value of the first key is `black` and the value of the second key is the path to the virtual\n    environment.\n\n    The third key is `editor.formatOnSave` and its value is `true`.\n\n    The function prints a message to the console when it's done.\n\n    The function is called in the `create_env` function.\n\n    The `create_env` function is called in the `main` function.\n\n    The `main` function is called when the script is run.\n\n    The `create_env` function is called with the name of the virtual environment as an argument.\n\n    The\n\n    :param env_path: The path to the virtual environment\n    \"\"\"\n    text_vscode = \"\"\"{{\"python.formatting.provider\": \"black\",\"python.pythonPath\": \"{name_env}\",\"editor.formatOnSave\": true,}}\"\"\"\n    create_dir_file(\".vscode/settings.json\", text_vscode.format(name_env=env_path))\n    print(notice + f\"Successfully created the .vscode/settings.json\")\n</code></pre>"},{"location":"reference/#fenv.fenv.create_virtualenv","title":"create_virtualenv","text":"<pre><code>create_virtualenv(virtual_env_name)\n</code></pre> <p>It creates a virtual environment in the current directory</p> <p>:param virtual_env_name: The name of the virtual environment you want to create</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_virtualenv(virtual_env_name):\n\"\"\"\n    It creates a virtual environment in the current directory\n\n    :param virtual_env_name: The name of the virtual environment you want to create\n    \"\"\"\n    os.chdir(virtual_env_name)\n    if not os.path.exists(virtual_env_name):\n        try:\n            os.system(f\"virtualenv env_{virtual_env_name}\")\n        except EnvironmentError as error:\n            print(error)\n    print(notice + f'Successfully created the virtualenv \"{virtual_env_name}\"')\n</code></pre>"},{"location":"reference/#fenv.fenv.find_dir_env","title":"find_dir_env","text":"<pre><code>find_dir_env()\n</code></pre> <p>It prints the contents of the current directory</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def find_dir_env() -&gt; str:\n\"\"\"\n    It prints the contents of the current directory\n    \"\"\"\n    for i in os.listdir(\".\"):\n        print(i)\n</code></pre>"},{"location":"reference/#fenv.fenv.install_package","title":"install_package","text":"<pre><code>install_package(args)\n</code></pre> <p>It takes a list of packages, and installs them using the <code>pip</code> command</p> <p>:param args: The arguments passed to the command</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def install_package(args):\n\"\"\"\n    It takes a list of packages, and installs them using the `pip` command\n\n    :param args: The arguments passed to the command\n    \"\"\"\n    print(notice + \"Installing...\")\n    cmd_install_package(args)\n    add_module_to_txt(args)\n</code></pre>"},{"location":"reference/#fenv.fenv.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>It takes the arguments from the command line and passes them to the create_project_all function</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def main():\n\"\"\"\n    It takes the arguments from the command line and passes them to the create_project_all function\n    \"\"\"\n    args = setup_parse()\n    version: str = \"v0.0.11\"\n    print(f\"\u23e9 fenv {version}\") if args.__dict__[\"command\"] == None else None\n    check_command(args)\n</code></pre>"},{"location":"reference/#fenv.fenv.remove_module_exit_txt","title":"remove_module_exit_txt","text":"<pre><code>remove_module_exit_txt(args)\n</code></pre> <p>It removes the module from the requirements.txt file</p> <p>:param args: This is the argument that is passed to the function</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def remove_module_exit_txt(args):\n\"\"\"\n    It removes the module from the requirements.txt file\n\n    :param args: This is the argument that is passed to the function\n    \"\"\"\n    try:\n        os.system(f\"pip freeze &gt; requirements.txt\")\n        print(\n            notice\n            + f'Successfully removed module {args.uninstall} exit from \"requirements.txt\"'\n        )\n    except Exception as e:\n        print(f\"Error: {e}\")\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_install","title":"run_cmd_install","text":"<pre><code>run_cmd_install(args)\n</code></pre> <p>It's a function that installs a package</p> <p>:param args: The arguments passed to the command</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_install(args):\n\"\"\"\n    It's a function that installs a package\n\n    :param args: The arguments passed to the command\n    \"\"\"\n    try:\n        print(\"Installing...\")\n        install_package(args)\n    except AttributeError as err:\n        print(\n            bcolors.OKGREEN\n            + \"An error was encountered, it could not be installed.\"\n            + bcolors.ENDC\n        )\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_new","title":"run_cmd_new","text":"<pre><code>run_cmd_new(args)\n</code></pre> <p>It creates a new project folder, and then creates a virtual environment inside that folder</p> <p>:param args: Namespace(new='test', project_folder='test')</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_new(args):\n\"\"\"\n    It creates a new project folder, and then creates a virtual environment inside that folder\n\n    :param args: Namespace(new='test', project_folder='test')\n    \"\"\"\n    try:\n        create_project_all(args, args.new)\n    except TypeError as err:\n        print(\n            \"Maybe you forgot to enter the name of the folder? for example\"\n            + \" `\"\n            + bcolors.OKGREEN\n            + \"fenv new\"\n            + bcolors.OKBLUE\n            + \" &lt;project_folder&gt;\"\n            + bcolors.ENDC,\n            \"`\",\n        )\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_onlyenv","title":"run_cmd_onlyenv","text":"<pre><code>run_cmd_onlyenv()\n</code></pre> <p>It creates a virtual environment with a random name, and then creates a settings.json file for vscode</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_onlyenv():\n\"\"\"\n    It creates a virtual environment with a random name, and then creates a settings.json file for\n    vscode\n    \"\"\"\n\n    def create_name_env_auto() -&gt; str:\n\"\"\"\n        &gt; It creates a random name for the environment\n        :return: A string\n        \"\"\"\n        name_ = random.choice([\"samai\", \"danai\"])\n        middle_ = random.choice(\"!@#$&amp;$\")\n        no_ = random.randint(0, 100)\n        return f\"{name_}{middle_}{no_}\"\n\n    def create_name_env() -&gt; str:\n\"\"\"\n        If the user enters a name for the virtualenv, the function will check if the name is in English\n        only, if it is, it will return the name, if not, it will return a name automatically\n        :return: The name of the virtual environment.\n        \"\"\"\n        _name = input(\n            \"Enter a name for the virtualenv (english only) , leave it blank to create it automatically: \"\n        ).replace(\" \", \"_\")\n\n        def is_english_only(s):\n            return bool(re.match(\"^[A-Za-z0-9_!@#$%^&amp;*()\\-+=]+$\", s))\n\n        if is_english_only(_name):\n            _name = _name[:10]\n            _name = \"{}\".format(_name)\n            return _name\n        else:\n            _name = create_name_env_auto()\n            return _name\n\n    def create_virtualenv(virtual_env_name):\n\"\"\"\n        It creates a virtual environment with the name you pass to it\n\n        :param virtual_env_name: The name of the virtual environment you want to create\n        \"\"\"\n        if not os.path.exists(virtual_env_name):\n            try:\n                os.system(f\"virtualenv env_{virtual_env_name}\")\n            except EnvironmentError as error:\n                print(error)\n        print(notice + f'Successfully created the virtualenv \"{virtual_env_name}\"')\n\n    _name_env = create_name_env()\n    print(f\"your env name is `{bcolors.OKGREEN}{_name_env}{bcolors.ENDC}`\")\n    create_virtualenv(_name_env)\n    create_setting_vscode(_name_env)\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_uninstall","title":"run_cmd_uninstall","text":"<pre><code>run_cmd_uninstall(args)\n</code></pre> <p>A function that is called when the user runs the command \"uninstall\"</p> <p>:param args: The arguments passed to the command</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_uninstall(args):\n\"\"\"\n    A function that is called when the user runs the command \"uninstall\"\n\n    :param args: The arguments passed to the command\n    \"\"\"\n    try:\n        print(notice + \"Uninstalling...\")\n        # uninstall_package(args)\n    except AttributeError as err:\n        print(err, \"An error was encountered, it could not be uninstalled.\")\n</code></pre>"},{"location":"reference/#fenv.fenv.run_install_module_base","title":"run_install_module_base","text":"<pre><code>run_install_module_base(env)\n</code></pre> <p>It installs the base Python modules</p> <p>:param env: The environment object</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_install_module_base(env):\n\"\"\"\n    It installs the base Python modules\n\n    :param env: The environment object\n    \"\"\"\n\n    if platform.system() == \"Windows\":\n        os.system(f\".\\env_{env}\\Scripts\\python.exe -m pip install -r requirements.txt\")\n        print(notice + f'Successfully installed module in \"requirements.txt\"')\n        os.system(f\".\\env_{env}\\Scripts\\python.exe -m pip freeze &gt; requirements.txt\")\n        print(notice + f'Successfully updated the file \"requirements.txt\"')\n        os.system(f\".\\env_{env}\\Scripts\\python.exe -m pip install --upgrade pip\")\n</code></pre>"},{"location":"reference/#fenv.fenv.setup_parse","title":"setup_parse","text":"<pre><code>setup_parse()\n</code></pre> <p>It takes a list of strings, and returns a dictionary of the form {'name': 'value'} :return: The return value is a Namespace object.</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def setup_parse():\n\"\"\"\n    It takes a list of strings, and returns a dictionary of the form {'name': 'value'}\n    :return: The return value is a Namespace object.\n    \"\"\"\n\n    parser = ArgumentParser(add_help=False)\n    title = parser.add_argument_group(title=\"Usage\")\n    title.description = \"fenv &lt;command&gt;\"\n\n    subparsers = parser.add_subparsers(title=\"Commands\", dest=\"command\", metavar=\"\")\n\n    new_comd = subparsers.add_parser(\"new\", help=\"Create a new project\")\n    new_comd.add_argument(\n        \"new\", type=str, help=\"The name of the project\", nargs=\"?\", default=None\n    )\n\n    install_cmd = subparsers.add_parser(\"install\", help=\"Install packages\")\n    install_cmd.add_argument(\n        \"install\",\n        type=str,\n        help=\"Install packages of the project packages\",\n        nargs=\"?\",\n        default=None,\n    )\n\n    uninstall_cmd = subparsers.add_parser(\"uninstall\", help=\"Uninstall packages\")\n    uninstall_cmd.add_argument(\n        \"uninstall\",\n        type=str,\n        help=\"Uninstall packages of the project packages\",\n        nargs=\"?\",\n        default=None,\n    )\n\n    update_cmd = subparsers.add_parser(\n        \"update\", help=\"Update packages to file requirements.txt\"\n    )\n\n    onlyenv_cmd = subparsers.add_parser(\n        \"onlyenv\", help=\"Create only virtualenv and no create base file\"\n    )\n\n    # clean_cmd = subparsers.add_parser(\n    #     \"clean\", help=\"Clean delete all packages in requirements.txt out\"\n    # )\n\n    general_group = parser.add_argument_group(title=\"General Options\")\n    general_group.add_argument(\n        \"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit\"\n    )\n\n    args = parser.parse_args()\n\n    return args\n</code></pre>"},{"location":"reference/#fenv.fenv.uninstall_package","title":"uninstall_package","text":"<pre><code>uninstall_package(args)\n</code></pre> <p>It takes a list of packages, and installs them using the <code>pip</code> command</p> <p>:param args: The arguments passed to the command</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def uninstall_package(args):\n\"\"\"\n    It takes a list of packages, and installs them using the `pip` command\n\n    :param args: The arguments passed to the command\n    \"\"\"\n    cmd_uninstall_package(args)\n    remove_module_exit_txt(args)\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#fenv-new-project_folder","title":"<code>fenv new [project_folder]</code>","text":"<p>Create a new project and create virtualenv with base file such <code>settings.json</code> on vscode and <code>main.py</code></p>"},{"location":"th/","title":"Fenv (\u0e40\u0e1f\u0e19\u0e27\u0e35)","text":"<p>Fenv \u0e40\u0e1b\u0e47\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e17\u0e35\u0e48\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e08\u0e30\u0e0a\u0e48\u0e27\u0e22\u0e04\u0e38\u0e13\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e41\u0e25\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e14\u0e49\u0e27\u0e22 Fenv \u0e04\u0e38\u0e13\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e47\u0e01\u0e15\u0e4c\u0e43\u0e2b\u0e21\u0e48\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e20\u0e32\u0e22\u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e19\u0e31\u0e49\u0e19 \u0e41\u0e25\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19\u0e44\u0e14\u0e49\u0e43\u0e19\u0e04\u0e23\u0e32\u0e27\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e43\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Python \u0e2b\u0e25\u0e32\u0e22\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e1a\u0e48\u0e2d\u0e22\u0e46 \u0e41\u0e25\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e08\u0e23\u0e34\u0e07</p>"},{"location":"th/#_1","title":"\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34","text":"<ul> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e21\u0e48\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27</li> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27\u0e20\u0e32\u0e22\u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23</li> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19</li> <li>\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e43\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Python \u0e2b\u0e25\u0e32\u0e22\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23</li> <li>\u0e40\u0e1e\u0e34\u0e48\u0e21 <code>black</code> \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a python</li> <li>\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e25\u0e30\u0e16\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e25\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e25\u0e07\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c <code>requirements.txt</code> \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e46\u0e01\u0e31\u0e19\u0e43\u0e19\u0e40\u0e27\u0e25\u0e32\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19</li> </ul>"},{"location":"th/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"th/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}]}