{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fenv Docs","text":""},{"location":"#fenv","title":"Fenv","text":"<p>Fenv is a simple and efficient tool to help you manage your virtual environments and create basic Python files with a single command. With Fenv, you can quickly generate a new project folder, establish a virtual environment within that folder, and simultaneously create the essential basic Python files all in one go. This tool is ideal for developers who frequently work on multiple Python projects and want a simple, streamlined solution for managing virtual environments.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate a new project folder with a single command</li> <li>Quickly establish a virtual environment within the project folder</li> <li>Simultaneously create essential basic Python files</li> <li>Ideal for developers who work on multiple Python projects</li> <li>Add <code>black</code> for format python</li> <li>Packages can be installed and uninstalled and added to files. <code>requirements.txt</code> at the same time</li> </ul>"},{"location":"#installer","title":"Installer","text":"<pre><code>pip install fenv\n</code></pre> <p>or</p> <pre><code>pip install --upgrade fenv\n</code></pre>"},{"location":"#pypi","title":"PyPi","text":"<pre><code>https://pypi.org/project/Fenv/\n</code></pre>"},{"location":"#command","title":"Command","text":"<pre><code>usage: fenv [-h] [-v]  ...\n\nUsage:\n  fenv &lt;command&gt;\n\nCommands:\n\n    new          Create a new project\n    install      Install the package and install the\n                 package via requirements.txt\n    uninstall    Uninstall packages\n    update       Package to file requirements.txt update\n                 furthermore, update the readme.md file's\n                 tree path.\n    onlyenv      Create only virtualenv and no create\n                 base file\n\nGeneral Options:\n  -h, --help     Show this help message and exit\n  -v, --version  check version fenv\n</code></pre>"},{"location":"#layout","title":"Layout","text":"<pre><code>\u2514\u2500\u2500 test/\n        \u2514\u2500\u2500.vscode/\n                \u2514\u2500\u2500settings.json\n        \u2514\u2500\u2500env_test/\n                \u2514\u2500\u2500 Lib/\n                \u2514\u2500\u2500 Scripts\n                \u2514\u2500\u2500 .gitignore\n                \u2514\u2500\u2500 pyvenv.cfg\n        \u2514\u2500\u2500.gitignore\n        \u2514\u2500\u2500main.py\n        \u2514\u2500\u2500readme.md\n        \u2514\u2500\u2500requirements.txt\n</code></pre>"},{"location":"how-to-guides/","title":"How-To Guides","text":""},{"location":"how-to-guides/#installation","title":"Installation","text":"<p>To install Fenv, simply run the following command:</p> <pre><code>pip install fenv\n</code></pre>"},{"location":"how-to-guides/#usage","title":"Usage","text":"<p>Fenv makes it easy to get started with a new Python project by providing an all-in-one solution. Here's how to use it:</p>"},{"location":"how-to-guides/#create-a-new-project-with-virtualenv-and-basic-files","title":"Create a new project with virtualenv and basic files:","text":"<pre><code>fenv new &lt;project_folder&gt;\n</code></pre>"},{"location":"how-to-guides/#activate-the-virtual-environment","title":"Activate the virtual environment:","text":""},{"location":"how-to-guides/#for-windows","title":"for windows","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"how-to-guides/#for-linux","title":"for linux","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"how-to-guides/#command-for-windows-only","title":"Command for windows only","text":""},{"location":"how-to-guides/#install-packages","title":"Install packages","text":"<pre><code>fenv install\n</code></pre> <p>One command can be used to install packages from requirements.txt, and if Fenv's virtual environment does not exist, it will prompt the user to create it. However, an error message will be displayed if the requirements.txt file cannot be located.</p> <pre><code>fenv install &lt;package_name&gt;\n</code></pre> <p>Install the package and add it to requirements.txt If the package name is omitted, the message <code>Maybe you forgot to put the name of the package to install? for example fenv install &lt;package_name&gt;</code> is displayed.</p>"},{"location":"how-to-guides/#uninstall-packages","title":"Uninstall packages","text":"<pre><code>fenv uninstall &lt;package_name&gt;\n</code></pre> <p>Uninstall the package and delete it from requirements.txt</p>"},{"location":"how-to-guides/#update-requirementstxt","title":"Update requirements.txt","text":"<pre><code>fenv update &lt;package_name&gt;\n</code></pre> <p>Update all packages to a file. requirements.txt</p>"},{"location":"how-to-guides/#create-virtualenv-only","title":"Create virtualenv only","text":"<pre><code>fenv onlyenv\n</code></pre> <p>Create a virtualenv with a custom name or an optional 2 autoname, then create a file. settings.json for vscode does not generate additional base files</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#fenv.fenv.add_module_to_txt","title":"add_module_to_txt","text":"<pre><code>add_module_to_txt(args)\n</code></pre> <p>It takes the argument from the command line and adds it to the requirements.txt file</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the script</p> required Example <pre><code>add_module_to_txt(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def add_module_to_txt(args):\n\"\"\"\n    It takes the argument from the command line and adds it to the requirements.txt file\n    Args:\n        args (str): The arguments passed to the script\n\n    Example:\n        ```py\n        add_module_to_txt(\"package_name\")\n        ```\n    Return:\n        None\n\n    \"\"\"\n    if env_directory():\n        os.system(\n            f\".\\{env_directory()}\\Scripts\\python.exe -m pip freeze &gt; requirements.txt\"\n        )\n        print(\n            notice + f'Successfully module {args.install} added to \"requirements.txt\"'\n        )\n</code></pre>"},{"location":"reference/#fenv.fenv.check_command","title":"check_command","text":"<pre><code>check_command(args)\n</code></pre> <p>It checks the command that the user has entered and then runs the appropriate function</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the script</p> required Example <pre><code>check_command(\"new\" or \"install\" or \"uninstall\" or \"update\" or \"onlyenv\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def check_command(args):\n\"\"\"\n    It checks the command that the user has entered and then runs the appropriate function\n\n    Args:\n        args (str): The arguments passed to the script\n\n    Example:\n        ```py\n        check_command(\"new\" or \"install\" or \"uninstall\" or \"update\" or \"onlyenv\")\n        ```\n    Return:\n        None\n    \"\"\"\n    if args.__dict__[\"command\"] == \"new\":\n        run_cmd_new(args)\n    elif args.__dict__[\"command\"] == \"install\":\n        run_cmd_install(args) if args.install != None else install_package_all()\n\n    elif args.__dict__[\"command\"] == \"uninstall\":\n        run_cmd_uninstall(args) if args.uninstall != None else print(\n            \"Maybe you forgot to put the name of the package to uninstall? for example\"\n            + \" `\"\n            + Colors.LIGHTGREEN_EX\n            + \"fenv uninstall\"\n            + Colors.OKBLUE\n            + \" &lt;package_name&gt;\"\n            + Colors.ENDC\n            + \"`\"\n        )\n    elif args.__dict__[\"command\"] == \"update\":\n        create_file_base(root_directory(), \"update\")\n        print(notice + \"Updated tree path to readme.md\")\n        os.system(\"pip freeze &gt; requirements.txt\")\n        print(notice + \"Updated module all to requirements.txt\")\n    elif args.__dict__[\"command\"] == \"onlyenv\":\n        run_cmd_onlyenv()\n</code></pre>"},{"location":"reference/#fenv.fenv.cmd_install_package","title":"cmd_install_package","text":"<pre><code>cmd_install_package(args)\n</code></pre> <p>It installs a package using pip</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the command</p> required Example <pre><code>cmd_install_package(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def cmd_install_package(args):\n\"\"\"\n    It installs a package using pip\n\n    Args:\n        args (str): The arguments passed to the command\n    Example:\n        ```py\n        cmd_install_package(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    try:\n        if platform.system() == \"Windows\":\n            os.system(\n                f\".\\{env_directory()}\\Scripts\\python.exe -m pip install {args.install}\"\n            )\n            print(notice + f\"Successfully installed module {args.install}\")\n    except TimeoutError:\n        print(TimeoutError)\n</code></pre>"},{"location":"reference/#fenv.fenv.cmd_uninstall_package","title":"cmd_uninstall_package","text":"<pre><code>cmd_uninstall_package(args)\n</code></pre> <p>It uninstalls a package from the virtual environment</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the command</p> required Example <pre><code>cmd_uninstall_package(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def cmd_uninstall_package(args):\n\"\"\"\n    It uninstalls a package from the virtual environment\n\n    Args:\n        args (str): The arguments passed to the command\n    Example:\n        ```py\n        cmd_uninstall_package(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    try:\n        if platform.system() == \"Windows\":\n            os.system(\n                f\".\\{env_directory()}\\Scripts\\python.exe -m pip uninstall {args.uninstall}\"\n            )\n            print(notice + f\"Successfully uninstalled module {args.uninstall}\")\n    except TimeoutError:\n        print(TimeoutError)\n</code></pre>"},{"location":"reference/#fenv.fenv.create_dir_file","title":"create_dir_file","text":"<pre><code>create_dir_file(path, text)\n</code></pre> <p>It creates a directory if it doesn't exist, and then creates a file in that directory with the given text</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file you want to create</p> required <code>text</code> <code>str</code> <p>The text to be written to the file</p> required Example <pre><code>create_dir_file(\".vscode/settings.json\", text_vscode.format(name_env=env_path))\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_dir_file(path, text):\n\"\"\"It creates a directory if it doesn't exist, and then creates a file in that directory with the given\n    text\n\n    Args:\n        path (str): The path to the file you want to create\n        text (str): The text to be written to the file\n\n    Example:\n        ```py\n        create_dir_file(\".vscode/settings.json\", text_vscode.format(name_env=env_path))\n        ```\n    Return:\n        None\n    \"\"\"\n    os.makedirs(os.path.dirname(path), exist_ok=True)\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        f.write(text)\n</code></pre>"},{"location":"reference/#fenv.fenv.create_file_base","title":"create_file_base","text":"<pre><code>create_file_base(name, state)\n</code></pre> <p>It creates a file called main.py and writes a function called main() inside of it</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the project</p> required <code>state</code> <code>str</code> <p>The state of the project</p> required Example <pre><code>create_file_base(\"project_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_file_base(name, state):\n\"\"\"\n    It creates a file called main.py and writes a function called main() inside of it\n\n    Args:\n        name (str): The name of the project\n        state (str): The state of the project\n    Example:\n        ```py\n        create_file_base(\"project_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n\n    def create_file_main_py():\n\"\"\"\n        It creates a file called main.py and writes a function called main() inside of it\n        \"\"\"\n\n        file_path = \"main.py\"\n        command = \"\"\"\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n    \"\"\"\n        with open(file_path, \"w\") as f:\n            f.write(command)\n        os.chmod(file_path, 0o777)\n        print(notice + f'Successfully created the file \"{file_path}\"')\n\n    def generate_tree(startpath):\n        output = \"\"\n        for root, dirs, files in os.walk(startpath):\n            level = root.replace(startpath, \"\").count(os.sep)\n            if level == 0:\n                indent = \"    \" * (level + 1) + \"\u2502   \"\n                subindent = \"    \" * (level + 2)\n                for d in dirs:\n                    dir_path = os.path.join(root, d)\n                    output += f\"{subindent}{'\u2514\u2500\u2500'}{d}/\\n\"\n                    if d == \".vscode\":\n                        output += f\"{subindent}{subindent}{'\u2514\u2500\u2500'}settings.json\\n\"\n                    if d == env_directory():\n                        for i in [\"Lib/\", \"Scripts\", \".gitignore\", \"pyvenv.cfg\"]:\n                            output += f\"{subindent}{subindent}{'\u2514\u2500\u2500'} {i}\\n\"\n\n                for f in files:\n                    file_path = os.path.join(root, f)\n                    output += f\"{subindent}{'\u2514\u2500\u2500'}{f}\\n\"\n        print(os.getcwd())\n        return output\n\n    def create_file_readme_md():\n\"\"\"\n        It creates a file called readme.md and writes the markdown text to it\n        \"\"\"\n        markdown_path = \"readme.md\"\n        markdown = \"\"\"\n# {}\nA brief and descriptive title for your project.\n\n## Description\n\nA detailed description of the project, including its purpose, features, and any other relevant information.\n\n## Getting Started\n\n```\ngit clone https://github.com/&lt;User Name Github&gt;/{}.git\n\ncd {}\n\n```\n\n## Installation\n\n```\n# create virtualenv auto name\nfenv onlyenv\n\n# install package in requirements.txt\nfenv install\n\n```\n\n## Usage\n\nInstructions on how to use the project, including any usage examples and screenshots.\n\n## Tree\n&lt;!--- Start Tree ---&gt;\n```bash\n.\n\u2514\u2500\u2500 {}/\n{}\n```\n&lt;!--- End Tree ---&gt;\n\n## Contributing\n\nIf you would like to contribute to the project, include a section on how to do so, including any guidelines and best practices.\n\n## License\n\nInclude information about the license used for the project, such as the name of the license (e.g. MIT, Apache 2.0, etc.) and a link to the license text.\n\n\"\"\"\n        with open(markdown_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(markdown.format(name, name, name, name, generate_tree(\".\")))\n        os.chmod(markdown_path, 0o777)\n        print(notice + f'Successfully created the file \"{markdown_path}\"')\n\n    def create_file_freeze():\n\"\"\"\n        It creates a file called \"requirements.txt\" and writes the string \"black\" to it\n        \"\"\"\n\n        module_base = \"\"\"black\"\"\"\n        with open(\"requirements.txt\", \"w\") as f:\n            f.write(module_base)\n        os.chmod(\"requirements.txt\", 0o777)\n        print(notice + f'Successfully created the file \"requirements.txt\"')\n\n    def create_file_gitignore():\n\"\"\"\n        It creates a file called .gitignore and writes the string \"*.pyc\" to it\n        \"\"\"\n        with open(\".gitignore\", \"w\") as f:\n            f.write(f\"*.pyc\\n/{env_directory()}\")\n        os.chmod(\".gitignore\", 0o777)\n        print(notice + f'Successfully created the file \".gitignore\"')\n\n    def update_file_readme_md():\n\"\"\"\n        It update a file called readme.md and writes the markdown text to it\n        \"\"\"\n        markdown_path = \"readme.md\"\n        with open(markdown_path, \"r\", encoding=\"utf-8\") as f:\n            data = f.readlines()\n\n        for i, v in enumerate(data):\n            if \"&lt;!--- Start Tree ---&gt;\" in v:\n                first = i\n\n            if \"&lt;!--- End Tree ---&gt;\" in v:\n                last = i\n\n        data = data[: first + 1] + data[last:]\n\n        for i, v in enumerate(data):\n            if \"&lt;!--- Start Tree ---&gt;\" in v:\n                data[\n                    i\n                ] = \"\"\"\n&lt;!--- Start Tree ---&gt;\n```bash\n.\n\u2514\u2500\u2500 {}/\n{}\n```\n\"\"\".format(\n                    name, generate_tree(\".\")\n                )\n        with open(markdown_path, \"w\", encoding=\"utf-8\") as f:\n            f.writelines(data)\n        os.chmod(markdown_path, 0o777)\n\n\"\"\"\n    create_file_base main call function\n    \"\"\"\n    if state == \"create\":\n        create_file_main_py()\n        create_file_freeze()\n        create_file_gitignore()\n        create_file_readme_md()\n        update_file_readme_md()\n    elif state == \"update\":\n        update_file_readme_md()\n\n\"\"\"\n    end of create_file_base function \n    \"\"\"\n</code></pre>"},{"location":"reference/#fenv.fenv.create_folder","title":"create_folder","text":"<pre><code>create_folder(folder_name)\n</code></pre> <p>It creates a folder with the name of the argument passed to it</p> <p>Args:     folder_name (str): The name of the folder you want to create</p> Example <pre><code>create_folder(\"project_name\")\n</code></pre> Return <p>1 : if has folder already</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_folder(folder_name):\n\"\"\"\n    It creates a folder with the name of the argument passed to it\n\n     Args:\n        folder_name (str): The name of the folder you want to create\n\n    Example:\n        ```py\n        create_folder(\"project_name\")\n        ```\n    Return:\n        1 : if has folder already\n    \"\"\"\n    try:\n        os.mkdir(folder_name)\n    except FileExistsError:\n        print(notice + f\"{folder_name} already exists.\")\n        return 1\n    else:\n        print(notice + f'Successfully created the directory \"{folder_name}\"')\n</code></pre>"},{"location":"reference/#fenv.fenv.create_project_all","title":"create_project_all","text":"<pre><code>create_project_all(name)\n</code></pre> <p>It creates a folder, creates a virtual environment, creates a settings file for VSCode, and creates a base file for the project</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the folder you want to create</p> required Example <pre><code>create_project_all(\"project_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_project_all(name):\n\"\"\"\n    It creates a folder, creates a virtual environment, creates a settings file for VSCode, and creates\n    a base file for the project\n\n    Args:\n      name (str): The name of the folder you want to create\n\n    Example:\n        ```py\n        create_project_all(\"project_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n\n    if create_folder(name) != 1:\n        print(notice + \"Creating...\")\n        create_virtualenv(name)\n        create_setting_vscode(name)\n        create_file_base(name, \"create\")\n        run_install_module_base(name)\n</code></pre>"},{"location":"reference/#fenv.fenv.create_setting_vscode","title":"create_setting_vscode","text":"<pre><code>create_setting_vscode(env_path)\n</code></pre> <p>It creates a file called settings.json in a directory called .vscode.</p> <p>The file contains a JSON object with two keys:</p> <ul> <li>python.formatting.provider</li> <li>python.pythonPath</li> </ul> <p>The value of the first key is the string \"black\".</p> <p>The value of the second key is the path to the virtual environment.</p> <p>The function also prints a message to the console.</p> <p>The message is a string that contains the value of the global variable notice.</p> <p>The message also contains the string \"Successfully created the .vscode/settings.json\".</p> <p>The function ends with the keyword def.</p> <p>The function is called create_setting_vscode.</p> <p>The function takes one argument.</p> <p>The argument is called env_path.</p> <p>The function begins with the keyword def.</p> <p>The function ends with the</p> <p>Parameters:</p> Name Type Description Default <code>env_path</code> <code>str</code> <p>The path to the virtual environment</p> required Example <pre><code>create_setting_vscode(\"env_path\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_setting_vscode(env_path):\n\"\"\"\n    It creates a file called settings.json in a directory called .vscode.\n\n    The file contains a JSON object with two keys:\n\n    - python.formatting.provider\n    - python.pythonPath\n\n    The value of the first key is the string \"black\".\n\n    The value of the second key is the path to the virtual environment.\n\n    The function also prints a message to the console.\n\n    The message is a string that contains the value of the global variable notice.\n\n    The message also contains the string \"Successfully created the .vscode/settings.json\".\n\n    The function ends with the keyword def.\n\n    The function is called create_setting_vscode.\n\n    The function takes one argument.\n\n    The argument is called env_path.\n\n    The function begins with the keyword def.\n\n    The function ends with the\n\n    Args:\n      env_path (str): The path to the virtual environment\n    Example:\n        ```py\n        create_setting_vscode(\"env_path\")\n        ```\n    Return:\n        None\n    \"\"\"\n\n    text_vscode = \"\"\"{{\"python.formatting.provider\": \"black\",\"python.pythonPath\": \"{name_env}\",\"editor.formatOnSave\": true,}}\"\"\"\n    create_dir_file(\".vscode/settings.json\", text_vscode.format(name_env=env_path))\n    print(notice + f\"Successfully created the .vscode/settings.json\")\n</code></pre>"},{"location":"reference/#fenv.fenv.create_virtualenv","title":"create_virtualenv","text":"<pre><code>create_virtualenv(virtual_env_name)\n</code></pre> <p>It creates a virtual environment in the current directory</p> <p>:param virtual_env_name (str): The name of the virtual environment you want to create</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def create_virtualenv(virtual_env_name):\n\"\"\"\n    It creates a virtual environment in the current directory\n\n    :param virtual_env_name (str): The name of the virtual environment you want to create\n    \"\"\"\n    os.chdir(virtual_env_name)\n    if not os.path.exists(virtual_env_name):\n        try:\n            os.system(f\"virtualenv env_{virtual_env_name}\")\n        except EnvironmentError as error:\n            print(error)\n    print(notice + f'Successfully created the virtualenv \"{virtual_env_name}\"')\n</code></pre>"},{"location":"reference/#fenv.fenv.env_directory","title":"env_directory","text":"<pre><code>env_directory()\n</code></pre> <p>It's a function that checks if the environment directory exists.</p> Return <p>[] : empyt list</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def env_directory():\n\"\"\"It's a function that checks if the environment directory exists.\n    Return:\n        [] : empyt list\n    \"\"\"\n    folder_name = \"env*\"\n    return (\n        fnmatch.filter(os.listdir(\".\"), folder_name)\n        if fnmatch.filter(os.listdir(\".\"), folder_name) == []\n        else str(fnmatch.filter(os.listdir(\".\"), folder_name)[0])\n    )\n</code></pre>"},{"location":"reference/#fenv.fenv.find_dir_env","title":"find_dir_env","text":"<pre><code>find_dir_env()\n</code></pre> <p>It prints the contents of the current directory</p> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def find_dir_env() -&gt; str:\n\"\"\"\n    It prints the contents of the current directory\n\n    Return:\n        None\n    \"\"\"\n    for i in os.listdir(\".\"):\n        print(i)\n</code></pre>"},{"location":"reference/#fenv.fenv.install_package","title":"install_package","text":"<pre><code>install_package(args)\n</code></pre> <p>It takes a list of packages, and installs them using the <code>pip</code> command</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the command</p> required Example <pre><code>install_package(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def install_package(args):\n\"\"\"\n    It takes a list of packages, and installs them using the `pip` command\n\n    Args:\n      args (str): The arguments passed to the command\n    Example:\n        ```py\n        install_package(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    print(notice + \"Installing...\")\n    cmd_install_package(args)\n    add_module_to_txt(args)\n</code></pre>"},{"location":"reference/#fenv.fenv.install_package_all","title":"install_package_all","text":"<pre><code>install_package_all()\n</code></pre> <p>install all packages in requirements.txt file using pip install -r requirements.txt</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def install_package_all():\n\"\"\"\n    install all packages in requirements.txt file using pip install -r requirements.txt\n    \"\"\"\n\n    folder_name = \"env*\"\n    folder_name_env = (\n        fnmatch.filter(os.listdir(\".\"), folder_name)\n        if fnmatch.filter(os.listdir(\".\"), folder_name) == []\n        else str(fnmatch.filter(os.listdir(\".\"), folder_name)[0])\n    )\n    requirements_file = \"requirements.txt\"\n\n    def install_package_follow_env(folder_name_env):\n        if platform.system() == \"Windows\":\n            os.system(\n                f\".\\{folder_name_env}\\Scripts\\python.exe -m pip install -r requirements.txt\"\n            )\n\n    def run_install_main(folder_name_env):\n        if folder_name_env:\n            print(\n                f\"Found directory  `{Colors.LIGHTGREEN_EX}{folder_name_env}{Colors.ENDC}`\"\n            )\n            print(\n                f\"Installing modules with  `{Colors.LIGHTGREEN_EX}{folder_name_env}{Colors.ENDC}`\"\n            )\n            install_package_follow_env(folder_name_env)\n            print(notice + f'Successfully installed module from \"requirements.txt\"')\n        else:\n            while True:\n                response = input(\n                    \"We couldn't find the fenv virtual environment. Would you like to set up a new one? (y/n): \"\n                )\n                if (\n                    response.lower() == \"y\"\n                    or response.lower() == \"yes\"\n                    or response.lower() == \"\"\n                ):\n                    run_cmd_onlyenv()\n                    folder_name = \"env*\"\n                    folder_name_env = str(\n                        fnmatch.filter(os.listdir(\".\"), folder_name)[0]\n                    )\n                    print(\n                        f\"Installing modules with  `{Colors.LIGHTGREEN_EX}{folder_name_env}{Colors.ENDC}`\"\n                    )\n                    install_package_follow_env(folder_name_env)\n                    print(\n                        notice\n                        + f'Successfully installed module from \"requirements.txt\"'\n                    )\n                    break\n                elif response.lower() == \"n\":\n                    os.system(f\"pip install -r requirements.txt\")\n                    break\n\n    if requirements_file in os.listdir(\".\"):\n        run_install_main(folder_name_env)\n    else:\n        print(\n            f\"Maybe you forgot to put the name of the package to ininstall? for example `{Colors.LIGHTGREEN_EX}fenv ininstall{Colors.OKBLUE} &lt;package_name&gt;{Colors.ENDC}` \\nOr you can use `{Colors.LIGHTGREEN_EX}fenv ininstall{Colors.ENDC}` alone. But there must be {Colors.FAIL}{requirements_file}{Colors.ENDC} in the current directory\"\n        )\n</code></pre>"},{"location":"reference/#fenv.fenv.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>It takes the arguments from the command line and passes them to the create_project_all function</p> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def main():\n\"\"\"\n    It takes the arguments from the command line and passes them to the create_project_all function\n    Return:\n        None\n    \"\"\"\n    args = setup_parse()\n    version: str = os.getenv(\"FENV_VERSION\")\n    print(\n        f\"\u23e9 {Colors.LIGHTMAGENTA_EX}Hello,Fenv {Colors.POWDER_BLUE}[{Colors.MINT_GREEN}v{version}{Colors.POWDER_BLUE}]{Colors.ENDC}\ud83e\udee1\\n\".center(\n            40, \"-\"\n        )\n    ) if args.__dict__[\"command\"] == None else None\n    check_command(args)\n</code></pre>"},{"location":"reference/#fenv.fenv.remove_module_exit_txt","title":"remove_module_exit_txt","text":"<pre><code>remove_module_exit_txt(args)\n</code></pre> <p>It removes the module from the requirements.txt file</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>This is the argument that is passed to the function.</p> required Example <pre><code>remove_module_exit_txt(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def remove_module_exit_txt(args):\n\"\"\"\n    It removes the module from the requirements.txt file\n\n    Args:\n      args (str): This is the argument that is passed to the function.\n    Example:\n        ```py\n        remove_module_exit_txt(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n\n    try:\n        os.system(f\"pip freeze &gt; requirements.txt\")\n        print(\n            notice\n            + f'Successfully removed module {args.uninstall} exit from \"requirements.txt\"'\n        )\n    except Exception as e:\n        print(f\"Error: {e}\")\n</code></pre>"},{"location":"reference/#fenv.fenv.root_directory","title":"root_directory","text":"<pre><code>root_directory()\n</code></pre> <p>It's a function that checks if the root directory exists.</p> Return <p>str : root directory</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def root_directory():\n\"\"\"It's a function that checks if the root directory exists.\n\n    Return:\n        str : root directory\n    \"\"\"\n    return os.path.basename(os.path.abspath(\".\"))\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_clean","title":"run_cmd_clean","text":"<pre><code>run_cmd_clean()\n</code></pre> <p>It finds the directory of the environment that you're currently in, and then runs the command <code>conda clean --all</code> in that directory</p> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_clean():\n\"\"\"\n    It finds the directory of the environment that you're currently in, and then runs the command `conda\n    clean --all` in that directory\n    Return:\n        None\n    \"\"\"\n    find_dir_env()\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_install","title":"run_cmd_install","text":"<pre><code>run_cmd_install(args)\n</code></pre> <p>It tries to install a package, if it fails, it prints a message</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the command.</p> required Example <pre><code>run_cmd_install(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_install(args):\n\"\"\"\n    It tries to install a package, if it fails, it prints a message\n\n    Args:\n      args (str): The arguments passed to the command.\n    Example:\n        ```py\n        run_cmd_install(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n\n    try:\n        if env_directory():\n            install_package(args)\n        else:\n            while True:\n                response = input(\n                    \"We couldn't find the fenv virtual environment. Would you like to set up a new one? (y/n): \"\n                )\n                if (\n                    response.lower() == \"y\"\n                    or response.lower() == \"yes\"\n                    or response.lower() == \"\"\n                ):\n                    run_cmd_onlyenv()\n                    folder_name = \"env*\"\n                    folder_name_env = str(\n                        fnmatch.filter(os.listdir(\".\"), folder_name)[0]\n                    )\n                    install_package(args)\n                    break\n                elif response.lower() == \"n\":\n                    install_package(args)\n                    break\n    except AttributeError as err:\n        print(\n            Colors.LIGHTGREEN_EX\n            + \"An error was encountered, it could not be installed.\"\n            + Colors.ENDC\n        )\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_new","title":"run_cmd_new","text":"<pre><code>run_cmd_new(args)\n</code></pre> <p>It creates a new project folder and then creates a virtual environment inside that folder</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the command.</p> required Example <pre><code>run_cmd_new(\"project_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_new(args):\n\"\"\"\n    It creates a new project folder and then creates a virtual environment inside that folder\n\n    Args:\n      args (str): The arguments passed to the command.\n    Example:\n        ```py\n        run_cmd_new(\"project_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n\n    try:\n        create_project_all(args.new)\n    except TypeError as err:\n        print(\n            \"Maybe you forgot to enter the name of the folder? for example\"\n            + \" `\"\n            + Colors.LIGHTGREEN_EX\n            + \"fenv new\"\n            + Colors.NAVY\n            + \" &lt;project_folder&gt;\"\n            + Colors.ENDC,\n            \"`\",\n        )\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_onlyenv","title":"run_cmd_onlyenv","text":"<pre><code>run_cmd_onlyenv()\n</code></pre> <p>It creates a virtual environment with a random name, and then creates a settings.json file for vscode</p> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_onlyenv():\n\"\"\"\n    It creates a virtual environment with a random name, and then creates a settings.json file for\n    vscode\n    Return:\n        None\n    \"\"\"\n\n    def create_name_env_auto() -&gt; str:\n\"\"\"\n        &gt; It creates a random name for the environment\n        :return: A string\n        \"\"\"\n        name_ = random.choice([\"samai\", \"danai\"])\n        middle_ = random.choice(\"_#\")\n        no_ = random.randint(0, 100)\n        return f\"{name_}{middle_}{no_}\"\n\n    def create_name_env() -&gt; str:\n\"\"\"\n        If the user enters a name for the virtualenv, the function will check if the name is in English\n        only, if it is, it will return the name, if not, it will return a name automatically\n        :return: The name of the virtual environment.\n        \"\"\"\n        _name = input(\n            \"Enter a name for the virtualenv (english only) , leave it blank to create it automatically: \"\n        ).replace(\" \", \"_\")\n\n        def is_english_only(s):\n            return bool(re.match(\"^[A-Za-z0-9_#]+$\", s))\n\n        if is_english_only(_name):\n            _name = _name[:10]\n            _name = \"{}\".format(_name)\n            return _name\n        else:\n            _name = create_name_env_auto()\n            return _name\n\n    def create_virtualenv(virtual_env_name):\n\"\"\"\n        It creates a virtual environment with the name you pass to it\n\n        Args:\n          virtual_env_name (str): The name of the virtual environment you want to create.\n\n        Example:\n            ```py\n            create_virtualenv(\"virtual_env_name\")\n            ```\n        Return:\n            None\n        \"\"\"\n\n        if not os.path.exists(virtual_env_name):\n            try:\n                os.system(f\"virtualenv env_{virtual_env_name}\")\n            except EnvironmentError as error:\n                print(error)\n        print(notice + f'Successfully created the virtualenv \"{virtual_env_name}\"')\n\n    _name_env = create_name_env()\n    print(f\"your env name is `{Colors.LIGHTGREEN_EX}{_name_env}{Colors.ENDC}`\")\n    create_virtualenv(_name_env)\n    dir_name_only = os.path.basename(os.getcwd())  # get name dir main\n    create_setting_vscode(dir_name_only)\n</code></pre>"},{"location":"reference/#fenv.fenv.run_cmd_uninstall","title":"run_cmd_uninstall","text":"<pre><code>run_cmd_uninstall(args)\n</code></pre> <p>\"A function that is called when the user runs the command \"uninstall\".\"</p> <p>The first line of the function is a docstring. It's a string that describes what the function does. It's a good idea to include a docstring for every function you write</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the command</p> required Example <pre><code>run_cmd_uninstall(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_cmd_uninstall(args):\n\"\"\"\n    \"A function that is called when the user runs the command \"uninstall\".\"\n\n    The first line of the function is a docstring. It's a string that describes what the function does.\n    It's a good idea to include a docstring for every function you write\n\n    Args:\n      args (str): The arguments passed to the command\n    Example:\n        ```py\n        run_cmd_uninstall(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    try:\n        print(notice + \"Uninstalling...\")\n        uninstall_package(args)\n    except AttributeError as err:\n        print(err, \"An error was encountered, it could not be uninstalled.\")\n</code></pre>"},{"location":"reference/#fenv.fenv.run_install_module_base","title":"run_install_module_base","text":"<pre><code>run_install_module_base(env)\n</code></pre> <p>It installs the base Python modules</p> <p>:param env: The environment object</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def run_install_module_base(env):\n\"\"\"\n    It installs the base Python modules\n\n    :param env: The environment object\n    \"\"\"\n\n    if platform.system() == \"Windows\":\n        os.system(f\".\\env_{env}\\Scripts\\python.exe -m pip install -r requirements.txt\")\n        print(notice + f'Successfully installed module in \"requirements.txt\"')\n        os.system(f\".\\env_{env}\\Scripts\\python.exe -m pip freeze &gt; requirements.txt\")\n        print(notice + f'Successfully updated the file \"requirements.txt\"')\n        os.system(f\".\\env_{env}\\Scripts\\python.exe -m pip install --upgrade pip\")\n</code></pre>"},{"location":"reference/#fenv.fenv.setup_parse","title":"setup_parse","text":"<pre><code>setup_parse()\n</code></pre> <p>It takes a list of strings, and returns a dictionary of the form {'name': 'value'} :return: The return value is a Namespace object.</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def setup_parse():\n\"\"\"\n    It takes a list of strings, and returns a dictionary of the form {'name': 'value'}\n    :return: The return value is a Namespace object.\n    \"\"\"\n\n    parser = ArgumentParser(add_help=False)\n    title = parser.add_argument_group(title=\"Usage\")\n    title.description = \"fenv &lt;command&gt;\"\n\n    subparsers = parser.add_subparsers(title=\"Commands\", dest=\"command\", metavar=\"\")\n\n    new_comd = subparsers.add_parser(\"new\", help=\"Create a new project\")\n    new_comd.add_argument(\n        \"new\", type=str, help=\"The name of the project\", nargs=\"?\", default=None\n    )\n\n    install_cmd = subparsers.add_parser(\n        \"install\",\n        help=\"Install the package and install the package via requirements.txt\",\n        usage=f\"{Colors.NAVY}fenv install {Colors.NAVY}&lt;package_name&gt;{Colors.ENDC} or {Colors.HOT_PINK}fenv install {Colors.ENDC}\",\n    )\n    install_cmd.add_argument(\n        \"install\",\n        type=str,\n        help=\"Install packages of the project packages\",\n        nargs=\"?\",\n        default=None,\n    )\n\n    uninstall_cmd = subparsers.add_parser(\n        \"uninstall\",\n        help=\"Uninstall packages\",\n        usage=f\"{Colors.HOT_PINK}fenv uninstall &lt;package_name&gt;{Colors.ENDC}\",\n    )\n    uninstall_cmd.add_argument(\n        \"uninstall\",\n        type=str,\n        help=\"Uninstall packages of the project packages\",\n        nargs=\"?\",\n        default=None,\n    )\n\n    update_cmd = subparsers.add_parser(\n        \"update\",\n        help=\"Package to file requirements.txt update furthermore, update the readme.md file's tree path.\",\n        usage=f\"{Colors.HOT_PINK}fenv update{Colors.ENDC}\",\n    )\n\n    onlyenv_cmd = subparsers.add_parser(\n        \"onlyenv\",\n        help=f\"Create only virtualenv and no create base file\",\n        usage=f\"{Colors.HOT_PINK}fenv onlyenv{Colors.ENDC}\",\n    )\n\n    # clean_cmd = subparsers.add_parser(\n    #     \"clean\", help=\"Clean delete all packages in requirements.txt out\"\n    # )\n\n    general_group = parser.add_argument_group(title=\"General Options\")\n    general_group.add_argument(\n        \"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit\"\n    )\n    general_group.add_argument(\n        \"-v\", \"--version\", action=\"store_true\", help=\"check version fenv\"\n    )\n\n    args = parser.parse_args()\n\n    return args\n</code></pre>"},{"location":"reference/#fenv.fenv.uninstall_package","title":"uninstall_package","text":"<pre><code>uninstall_package(args)\n</code></pre> <p>It will uninstall the package and remove the module exit text file</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the script.</p> required Example <pre><code>uninstall_package(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def uninstall_package(args):\n\"\"\"\n    It will uninstall the package and remove the module exit text file\n\n    Args:\n      args (str): The arguments passed to the script.\n    Example:\n        ```py\n        uninstall_package(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    cmd_uninstall_package(args)\n    remove_module_exit_txt(args)\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#fenv-new-project_folder","title":"<code>fenv new [project_folder]</code>","text":"<p>Create a new project and create virtualenv with base file such <code>settings.json</code> on vscode and <code>main.py</code></p>"},{"location":"tutorials/#fenv-install","title":"<code>fenv install</code>","text":"<p>Install all modules in requirements.txt is similar to <code>npm install</code>.</p>"},{"location":"tutorials/#fenv-install-package_name","title":"<code>fenv install &lt;package_name&gt;</code>","text":"<p>Install the modules you want to install. After the installation is complete add the module name to the file. automatic requirements.txt</p>"},{"location":"tutorials/#fenv-uninstall-package_name","title":"<code>fenv uninstall &lt;package_name&gt;</code>","text":"<p>Uninstall the modules you want to uninstall. After the uninstallation is complete add the module name to the file. automatic requirements.txt</p>"},{"location":"tutorials/#fenv-onlyenv","title":"<code>fenv onlyenv</code>","text":"<p>Create a virtualenv with settings to connect the interpreter to vscode and format the code with black.</p>"},{"location":"th/","title":"Fenv (\u0e40\u0e1f\u0e19\u0e27\u0e35)","text":"<p>Fenv \u0e40\u0e1b\u0e47\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e17\u0e35\u0e48\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e08\u0e30\u0e0a\u0e48\u0e27\u0e22\u0e04\u0e38\u0e13\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e41\u0e25\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e14\u0e49\u0e27\u0e22 Fenv \u0e04\u0e38\u0e13\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e47\u0e01\u0e15\u0e4c\u0e43\u0e2b\u0e21\u0e48\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e20\u0e32\u0e22\u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e19\u0e31\u0e49\u0e19 \u0e41\u0e25\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19\u0e44\u0e14\u0e49\u0e43\u0e19\u0e04\u0e23\u0e32\u0e27\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e43\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Python \u0e2b\u0e25\u0e32\u0e22\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e1a\u0e48\u0e2d\u0e22\u0e46 \u0e41\u0e25\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e08\u0e23\u0e34\u0e07</p>"},{"location":"th/#_1","title":"\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34","text":"<ul> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e21\u0e48\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27</li> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27\u0e20\u0e32\u0e22\u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23</li> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19</li> <li>\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e43\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Python \u0e2b\u0e25\u0e32\u0e22\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23</li> <li>\u0e40\u0e1e\u0e34\u0e48\u0e21 <code>black</code> \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a python</li> <li>\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e25\u0e30\u0e16\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e25\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e25\u0e07\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c <code>requirements.txt</code> \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e46\u0e01\u0e31\u0e19\u0e43\u0e19\u0e40\u0e27\u0e25\u0e32\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19</li> </ul>"},{"location":"th/#_2","title":"\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07","text":"<p><pre><code>pip install fenv\n</code></pre> or <pre><code>pip install --upgrade fenv\n</code></pre></p>"},{"location":"th/#_3","title":"\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07","text":"<pre><code>$ fenv -h\n\nUsage:\n  fenv [options] &lt;command&gt;\n\nCommands:\n\n    new       Create a new project\n    install   Install packages\n    uninstall Uninstall packages\n    update    Update packages to file requirements.txt\n    onlyenv   Create only virtualenv and no create base file\n\nGeneral Options:\n  -h, --help  Show this help message and exit\n</code></pre>"},{"location":"th/#_4","title":"\u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07","text":"<pre><code>|_ .vscode/\n|    |_ settings.json\n|\n|_ env_name/\n|    |_ Lib\n|    |_ Scripts\n|    |_ .gitignore\n|    |_ pyvenv\n|\n|_ main.py\n|_ readme.md\n|_ requirements.txt\n</code></pre>"},{"location":"th/#_5","title":"\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07","text":"<p>\u0e43\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Fenv \u0e40\u0e1e\u0e35\u0e22\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e19\u0e35\u0e49:</p> <pre><code>pip install fenv\n</code></pre>"},{"location":"th/#_6","title":"\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19","text":"<p>Fenv \u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Python \u0e43\u0e2b\u0e21\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e07\u0e48\u0e32\u0e22\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e42\u0e0b\u0e25\u0e39\u0e0a\u0e31\u0e19\u0e41\u0e1a\u0e1a all-in-one \u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19:</p>"},{"location":"th/#virtualenv","title":"\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e21\u0e48\u0e1e\u0e23\u0e49\u0e2d\u0e21 virtualenv \u0e41\u0e25\u0e30\u0e44\u0e1f\u0e25\u0e4c\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19:","text":"<pre><code>fenv new &lt;project_folder&gt;\n</code></pre>"},{"location":"th/#_7","title":"\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e08\u0e23\u0e34\u0e07:","text":""},{"location":"th/#for-windows","title":"for windows","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"th/#for-linux","title":"for linux","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"th/#windows","title":"\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Windows \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19","text":""},{"location":"th/#_8","title":"\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08","text":"<pre><code>fenv install &lt;package_name&gt;\n</code></pre> <p>\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e41\u0e25\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e25\u0e07\u0e43\u0e19 requirement.txt \u0e2b\u0e32\u0e01\u0e44\u0e21\u0e48\u0e43\u0e2a\u0e48\u0e0a\u0e37\u0e48\u0e2d\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08 \u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21 <code>Maybe you forgot to put the name of the package to install? for example fenv install &lt;package_name&gt;</code> \u0e08\u0e30\u0e1b\u0e23\u0e32\u0e01\u0e0f\u0e02\u0e36\u0e49\u0e19</p>"},{"location":"th/#_9","title":"\u0e16\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08","text":"<pre><code>fenv uninstall &lt;package_name&gt;\n</code></pre> <p>\u0e16\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e41\u0e25\u0e30\u0e25\u0e1a\u0e2d\u0e2d\u0e01\u0e08\u0e32\u0e01 requirement.txt</p>"},{"location":"th/#requirementstxt","title":"\u0e2d\u0e31\u0e1b\u0e40\u0e14\u0e15 requirements.txt","text":"<pre><code>fenv update &lt;package_name&gt;\n</code></pre> <p>\u0e2d\u0e31\u0e1b\u0e40\u0e14\u0e15\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e25\u0e07\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c requirement.txt</p>"},{"location":"th/#virtualenv_1","title":"\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e04\u0e48 virtualenv \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19","text":"<pre><code>fenv onlyenv\n</code></pre> <p>\u0e2a\u0e23\u0e49\u0e32\u0e07 virtualenv \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e40\u0e2d\u0e07\u0e2b\u0e23\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 2 \u0e15\u0e31\u0e27\u0e40\u0e25\u0e37\u0e2d\u0e01 \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c settings.json \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a vscode \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e43\u0e2b\u0e49</p>"}]}