{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fenv Docs","text":""},{"location":"#fenv","title":"Fenv","text":"<p>Fenv is a simple and efficient tool to help you manage your virtual environments and create basic Python files with a single command. With Fenv, you can quickly generate a new project folder, establish a virtual environment within that folder, and simultaneously create the essential basic Python files all in one go. This tool is ideal for developers who frequently work on multiple Python projects and want a simple, streamlined solution for managing virtual environments.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate a new project folder with a single command</li> <li>Quickly establish a virtual environment within the project folder</li> <li>Simultaneously create essential basic Python files</li> <li>Ideal for developers who work on multiple Python projects</li> <li>Add <code>black</code> for format python</li> <li>Packages can be installed and uninstalled and added to files. <code>requirements.txt</code> at the same time</li> <li>Clear packages back to the default packages</li> <li>etc</li> </ul>"},{"location":"#install","title":"Install","text":"<pre><code>pip install fenv\n</code></pre>"},{"location":"#linux-and-macos","title":"Linux and macOS","text":"<pre><code>pip install fenv\n</code></pre> <p>or</p> <pre><code>pip install --upgrade fenv\n</code></pre>"},{"location":"#windows","title":"Windows","text":"<p>If you are using Windows, you can install Fenv using pipx, which is a tool that allows you to install and run Python applications in isolated environments. This is a great way to install Fenv, as it will not interfere with any other Python applications you may have installed on your system.</p> <p>Note: pipx only works with Python 3.6+.</p> <p>First, install pipx using the following command:</p> <pre><code>py -m pip install --user pipx\n</code></pre> <pre><code>py -m pipx ensurepath\n</code></pre> <p>Then, install Fenv using pipx:</p> <pre><code>pipx install fenv\n</code></pre> <p>Note: ensurepath ensures that the application directory is on your $PATH. You may need to restart your terminal for this update to take effect.</p> <p>You may need to restart your terminal for this update to take effect.</p>"},{"location":"#pypi","title":"PyPi","text":"<pre><code>https://pypi.org/project/Fenv/\n</code></pre>"},{"location":"#command","title":"Command","text":"<pre><code>usage: fenv [-h] [-v]  ...\n\nUsage:\n  fenv &lt;command&gt;\n\nCommands:\n\n    new          Create a new project\n    install      Install the package and install the\n                 package via requirements.txt\n    uninstall    Uninstall packages\n    update       Package to file requirements.txt update\n                 furthermore, update the readme.md file's\n                 tree path.\n    onlyenv      Create only virtualenv and no create\n                 base file\n    clean        Clean delete all packages in requirements.txt out\n    activate     Activate the virtual environment if the terminal is not supported will show a hint.\n\nGeneral Options:\n  -h, --help     Show this help message and exit\n  -v, --version  check version fenv\n\n</code></pre>"},{"location":"#layout","title":"Layout","text":"<pre><code>\u2514\u2500\u2500 test/\n        \u2514\u2500\u2500.vscode/\n                \u2514\u2500\u2500settings.json\n        \u2514\u2500\u2500env_test/\n                \u2514\u2500\u2500 Lib/\n                \u2514\u2500\u2500 Scripts\n                \u2514\u2500\u2500 .gitignore\n                \u2514\u2500\u2500 pyvenv.cfg\n        \u2514\u2500\u2500.gitignore\n        \u2514\u2500\u2500main.py\n        \u2514\u2500\u2500readme.md\n        \u2514\u2500\u2500requirements.txt\n</code></pre>"},{"location":"EnvAll/","title":"Class Environment All","text":"<p>Module about passing folder names</p>"},{"location":"EnvAll/#fenv.env_all.EnvAll","title":"EnvAll","text":"<pre><code>EnvAll(**kwargs)\n</code></pre> Source code in <code>fenv\\env_all.py</code> <pre><code>def __init__(self, **kwargs):\n    self.kwargs = kwargs\n    self.config = configparser.ConfigParser()\n</code></pre>"},{"location":"EnvAll/#fenv.env_all.EnvAll.create_lib_default_env","title":"create_lib_default_env","text":"<pre><code>create_lib_default_env()\n</code></pre> <p>It's a function that creates the env.</p> Return <p>str : env name</p> Source code in <code>fenv\\env_all.py</code> <pre><code>def create_lib_default_env(self):\n\"\"\"It's a function that creates the env.\n    Return:\n        str : env name\n    \"\"\"\n    self.data_list = []\n\n    if platform.system() == \"Windows\":\n        path_lib_all = self.get_path_lib_all()\n        for i in os.listdir(path_lib_all):\n            self.data_list.append(i)\n            self.data_string = \",\".join(self.data_list)\n            self.config[\"fenv\"] = {\"default_lib\": self.data_string}\n            with open(rf\"{self.get_env_name()}\\fenv.cfg\", \"w\") as configfile:\n                self.config.write(configfile)\n    elif platform.system() == \"Linux\":\n        path_lib_all = self.get_path_lib_all()\n        for i in os.listdir(path_lib_all):\n            self.data_list.append(i)\n            self.data_string = \",\".join(self.data_list)\n            self.config[\"fenv\"] = {\n                \"default_lib\": self.data_string,\n            }\n            with open(rf\"{self.get_env_name()}/fenv.cfg\", \"w\") as configfile:\n                self.config.write(configfile)\n</code></pre>"},{"location":"EnvAll/#fenv.env_all.EnvAll.get_env_name","title":"get_env_name","text":"<pre><code>get_env_name()\n</code></pre> <p>It's a function that checks if the environment directory exists.</p> Return <p>[] : empyt list</p> Source code in <code>fenv\\env_all.py</code> <pre><code>def get_env_name(self):\n\"\"\"It's a function that checks if the environment directory exists.\n    Return:\n        [] : empyt list\n    \"\"\"\n    self.folder_name = \"env*\"\n    return (\n        fnmatch.filter(os.listdir(\".\"), self.folder_name)\n        if fnmatch.filter(os.listdir(\".\"), self.folder_name) == []\n        else str(fnmatch.filter(os.listdir(\".\"), self.folder_name)[0])\n    )\n</code></pre>"},{"location":"EnvAll/#fenv.env_all.EnvAll.get_lib_default_env","title":"get_lib_default_env","text":"<pre><code>get_lib_default_env()\n</code></pre> <p>It reads a config file, gets a string, splits it into a list, and returns the list</p> Return <p>data_list : list</p> Source code in <code>fenv\\env_all.py</code> <pre><code>def get_lib_default_env(self):\n\"\"\"\n    It reads a config file, gets a string, splits it into a list, and returns the list\n    Return:\n        data_list : list\n    \"\"\"\n    self.config.read(rf\"{self.get_env_name()}/fenv.cfg\")\n\n    self.data_string = self.config.get(\"fenv\", \"default_lib\")\n\n    self.data_list = self.data_string.split(\",\")\n    return self.data_list\n</code></pre>"},{"location":"EnvAll/#fenv.env_all.EnvAll.get_path_lib_all","title":"get_path_lib_all","text":"<pre><code>get_path_lib_all()\n</code></pre> <p>It's a function that checks if the environment directory exists.</p> Return <p>path_lib_all : str</p> Source code in <code>fenv\\env_all.py</code> <pre><code>def get_path_lib_all(self):\n\"\"\"\n    It's a function that checks if the environment directory exists.\n    Return:\n        path_lib_all : str\n    \"\"\"\n    if platform.system() == \"Windows\":\n        return f\"{self.get_env_name()}\\Lib\\site-packages\"\n    elif platform.system() == \"Linux\":\n        return \"\".join(\n            glob.glob(f\"{self.get_env_name()}/lib/python*/site-packages\")\n        )\n</code></pre>"},{"location":"EnvAll/#fenv.env_all.EnvAll.get_root_dir_name","title":"get_root_dir_name","text":"<pre><code>get_root_dir_name()\n</code></pre> <p>It's a function that checks if the root directory exists.</p> Return <p>str : root directory</p> Source code in <code>fenv\\env_all.py</code> <pre><code>def get_root_dir_name(self):\n\"\"\"It's a function that checks if the root directory exists.\n\n    Return:\n        str : root directory\n    \"\"\"\n    return os.path.basename(os.path.abspath(\".\"))\n</code></pre>"},{"location":"Fenv/","title":"Class Fenv","text":""},{"location":"Fenv/#fenv.fenv.version","title":"version  <code>module-attribute</code>","text":"<pre><code>version: str = '0.0.12.1'\n</code></pre> <p>Module fenv main</p>"},{"location":"Fenv/#fenv.fenv.check_command","title":"check_command","text":"<pre><code>check_command(args)\n</code></pre> <p>It checks the command that the user has entered and then runs the appropriate function</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the script</p> required Example <pre><code>check_command(\"new\" or \"install\" or \"uninstall\" or \"update\" or \"onlyenv\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def check_command(args):\n\"\"\"\n    It checks the command that the user has entered and then runs the appropriate function\n\n    Args:\n        args (str): The arguments passed to the script\n\n    Example:\n        ```py\n        check_command(\"new\" or \"install\" or \"uninstall\" or \"update\" or \"onlyenv\")\n        ```\n    Return:\n        None\n    \"\"\"\n    if args.__dict__[\"command\"] == \"new\":\n        try:\n            CreateFileBaseAndUpdate(args.new, \"create\").procress_only_create_project()\n        except TypeError as err:\n            print(\n                f\"Maybe you forgot to enter the name of the folder? For example: {colors.LIGHTGREEN_EX}fenv new{colors.NAVY} &lt;project_folder&gt;{colors.ENDC}\"\n            )\n\n    elif args.__dict__[\"command\"] == \"install\":\n        InstallModule(\n            args\n        ).install_package_only() if args.install != None else InstallModule(\n            args\n        ).install_package_all()\n\n    elif args.__dict__[\"command\"] == \"uninstall\":\n        UninstallModule(args).process_run() if args.uninstall != None else print(\n            f\"Maybe you forgot to put the name of the package to uninstall? \"\n            f\"For example: {colors.LIGHTGREEN_EX}fenv uninstall{colors.OKBLUE} &lt;package_name&gt;{colors.ENDC}\"\n        )\n    elif args.__dict__[\"command\"] == \"update\":\n        CreateFileBaseAndUpdate(\n            root_directory, \"update\"\n        ).process_create_base_file_and_update()\n        print(f\"{notice}Updated tree path to readme.md\")\n        os.system(\"pip freeze &gt; requirements.txt\")\n        print(f\"{notice}Updated module all to requirements.txt\")\n    elif args.__dict__[\"command\"] == \"onlyenv\":\n        OnlyVirtualEnv().run_process()\n\n    elif args.__dict__[\"command\"] == \"clean\":\n        question = input(\n            \"Do you want to delete all packages in requirements.txt out? (y/n) \"\n        ).lower()\n        if question in [\"y\", \"\"]:\n            Cleanup().remove_lib_not_default_in_env()\n    elif args.__dict__[\"command\"] == \"activate\":\n        StateEnv().activate()\n    elif args.__dict__[\"command\"] == \"test\":\n        print(\"D:D:D:D:D:D:D:D\")\n</code></pre>"},{"location":"Fenv/#fenv.fenv.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>It takes the arguments from the command line and passes them to the create_project_all function</p> Return <p>None</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def main():\n\"\"\"\n    It takes the arguments from the command line and passes them to the create_project_all function\n    Return:\n        None\n    \"\"\"\n    args = setup_parse()\n\n    try:\n        print(\n            f\"\u23e9 {colors.LIGHTMAGENTA_EX}Hello,Fenv {colors.POWDER_BLUE}[{colors.MINT_GREEN}v{version}{colors.POWDER_BLUE}]{colors.ENDC}\ud83e\udee1\\n\".center(\n                40, \"-\"\n            )\n        ) if args.__dict__[\"command\"] is None else None\n    except:\n        print(\n            f\"{colors.LIGHTMAGENTA_EX}Hello,Fenv {colors.POWDER_BLUE}[{colors.MINT_GREEN}v{version}{colors.POWDER_BLUE}]{colors.ENDC}\\n\".center(\n                40, \"-\"\n            )\n        ) if args.__dict__[\"command\"] is None else None\n    check_command(args)\n</code></pre>"},{"location":"Fenv/#fenv.fenv.setup_parse","title":"setup_parse","text":"<pre><code>setup_parse()\n</code></pre> <p>It takes a list of strings, and returns a dictionary of the form {'name': 'value'} :return: The return value is a Namespace object.</p> Source code in <code>fenv\\fenv.py</code> <pre><code>def setup_parse():\n\"\"\"\n    It takes a list of strings, and returns a dictionary of the form {'name': 'value'}\n    :return: The return value is a Namespace object.\n    \"\"\"\n\n    parser = ArgumentParser(add_help=False)\n    title = parser.add_argument_group(title=\"Usage\")\n    title.description = \"fenv &lt;command&gt;\"\n\n    subparsers = parser.add_subparsers(title=\"Commands\", dest=\"command\", metavar=\"\")\n\n    new_comd = subparsers.add_parser(\"new\", help=\"Create a new project\")\n    new_comd.add_argument(\n        \"new\", type=str, help=\"The name of the project\", nargs=\"?\", default=None\n    )\n\n    install_cmd = subparsers.add_parser(\n        \"install\",\n        help=\"Install the package and install the package via requirements.txt\",\n        usage=f\"{colors.NAVY}fenv install {colors.NAVY}&lt;package_name&gt;{colors.ENDC} or {colors.HOT_PINK}fenv install {colors.ENDC}\",\n    )\n    install_cmd.add_argument(\n        \"install\",\n        type=str,\n        help=\"Install packages of the project packages\",\n        nargs=\"?\",\n        default=None,\n    )\n\n    uninstall_cmd = subparsers.add_parser(\n        \"uninstall\",\n        help=\"Uninstall packages\",\n        usage=f\"{colors.HOT_PINK}fenv uninstall &lt;package_name&gt;{colors.ENDC}\",\n    )\n    uninstall_cmd.add_argument(\n        \"uninstall\",\n        type=str,\n        help=\"Uninstall packages of the project packages\",\n        nargs=\"?\",\n        default=None,\n    )\n\n    update_cmd = subparsers.add_parser(\n        \"update\",\n        help=\"Package to file requirements.txt update furthermore, update the readme.md file's tree path.\",\n        usage=f\"{colors.HOT_PINK}fenv update{colors.ENDC}\",\n    )\n\n    onlyenv_cmd = subparsers.add_parser(\n        \"onlyenv\",\n        help=\"Create only virtualenv and no create base file\",\n        usage=f\"{colors.HOT_PINK}fenv onlyenv{colors.ENDC}\",\n    )\n\n    clean_cmd = subparsers.add_parser(\n        \"clean\", help=\"Clean delete all packages in requirements.txt out\"\n    )\n    activate_cmd = subparsers.add_parser(\n        \"activate\",\n        help=\"Activate the virtual environment if the terminal is not supported will show a hint.\",\n    )\n\n    test_cmd = subparsers.add_parser(\"test\", help=\"test\")\n\n    general_group = parser.add_argument_group(title=\"General Options\")\n    general_group.add_argument(\n        \"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit\"\n    )\n    general_group.add_argument(\n        \"-v\", \"--version\", action=\"store_true\", help=\"check version fenv\"\n    )\n\n    return parser.parse_args()\n</code></pre>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#00121","title":"0.0.12.1","text":"<ul> <li>[x] Remove <code>fenv deactivate</code> from pull/6 @yassine20011</li> <li>[x] Clean code env_all.py , manage_file.py @yassine20011</li> <li>[x] Fix in file <code>state_env.py</code> pull/6 @yassine20011</li> </ul>"},{"location":"changelog/#00120","title":"0.0.12.0","text":"<ul> <li>[x] An improved string using f-string format @yassine20011 pull/5/files</li> <li>[x] Add installation instructions for Windows users using pipx @yassine20011 pull/5/files</li> </ul>"},{"location":"changelog/#00119","title":"0.0.11.9","text":"<ul> <li>[x] Add command more <code>fenv deactivate</code> Command hint to deactivate virtual environment with folder</li> <li>[x] Add command more <code>fenv activate</code> Command hint to activate virtual environment with folder       </li> </ul>"},{"location":"changelog/#00118","title":"0.0.11.8","text":"<ul> <li>Fix error ModuleNotFoundError: No module named 'dotenv' and not show version fenv</li> </ul>"},{"location":"changelog/#00117","title":"0.0.11.7","text":"<ul> <li>[x] <code>fenv uninstall &lt;package&gt;</code> can remove packages and package dependencies all in one Tested [Windows]</li> <li>before </li> <li>after </li> <li>[x] Add command <code>fenv clean</code> to clean packages left lib basic files pass test [Windows] and [Linux] </li> <li>[x] Added fev.cfg file</li> <li>[x] Support command all in Linux</li> </ul>"},{"location":"changelog/#00116","title":"0.0.11.6","text":"<ul> <li>[x] Fix bug create readme.md change <code>env_directory()</code> to <code>name</code></li> </ul>"},{"location":"changelog/#00115","title":"0.0.11.5","text":"<ul> <li>[x] Added Tree path in md after generating projects , can you try command <code>fenv update</code> </li> <li>[x] Added create file .gitignore</li> <li>[x] Edit readme.md small changes</li> <li>[x] Fix if an <code>env</code> folder does not exist, the modified <code>fenv install &lt;packages&gt;</code> command will prompt you to confirm whether you would like to create a new <code>env</code>. If you choose not to create a new <code>env</code>, the installation will proceed using <code>python main</code> </li> <li>[x] Added command <code>fenv install</code> alone will install file requirements.txt in directory current </li> <li>[x] Added after use <code>fenv onlyenv</code> created settings then activate env one time </li> </ul>"},{"location":"changelog/#00114","title":"0.0.11.4","text":"<ul> <li>[x] Fix bugs small</li> </ul>"},{"location":"changelog/#00113","title":"0.0.11.3","text":"<ul> <li>[x] Fix bugs settings in .vscode</li> <li>[x] Fix bugs line 609 and 624</li> </ul>"},{"location":"changelog/#00112","title":"0.0.11.2","text":"<ul> <li>[x] Fix bugs small</li> </ul>"},{"location":"changelog/#00111","title":"0.0.11.1","text":"<ul> <li>[x] Change new pattern command <code>-onlyenv</code> to <code>onlyenv</code></li> </ul>"},{"location":"changelog/#0010","title":"0.0.10","text":"<ul> <li>[x] Add option <code>-onlyenv</code> for create only virtualenv without base file all</li> <li>[x] Add command install for install package and add module to file requirements.txt</li> </ul>"},{"location":"changelog/#009","title":"0.0.9","text":"<ul> <li>[x] Release 0.0.9</li> </ul>"},{"location":"colors/","title":"Class Colors","text":"<pre><code>class Colors:\n    \"\"\"\n    It's a class that contains a bunch of constants that represent colors.\n    Example:\n        Colors.RED\n        Colors.GREEN\n        Colors.YELLOW\n        Colors.BLUE\n        Colors.CYAN\n        Colors.MAGENTA\n        Colors.WHITE\n\n\n    \"\"\"\n\n    ESCAPE_SEQ = {\n        \"HEADER\": \"\\033[95m\",\n        \"OKBLUE\": \"\\033[94m\",\n        \"OKGREEN\": \"\\033[92m\",\n        \"WARNING\": \"\\033[93m\",\n        \"FAIL\": \"\\033[91m\",\n        \"ENDC\": \"\\033[0m\",\n        \"BOLD\": \"\\033[1m\",\n        \"UNDERLINE\": \"\\033[4m\",\n    }\n\n    TEXT_COLORS = {\n        \"BLACK\": \"\\033[30m\",\n        \"RED\": \"\\033[31m\",\n        \"GREEN\": \"\\033[32m\",\n        \"YELLOW\": \"\\033[33m\",\n        \"BLUE\": \"\\033[34m\",\n        \"MAGENTA\": \"\\033[35m\",\n        \"CYAN\": \"\\033[36m\",\n        \"WHITE\": \"\\033[37m\",\n    }\n\n    LIGHT_COLORS = {\n        \"LIGHTBLACK_EX\": \"\\033[90m\",\n        \"LIGHTRED_EX\": \"\\033[91m\",\n        \"LIGHTGREEN_EX\": \"\\033[92m\",\n        \"LIGHTYELLOW_EX\": \"\\033[93m\",\n        \"LIGHTBLUE_EX\": \"\\033[94m\",\n        \"LIGHTMAGENTA_EX\": \"\\033[95m\",\n        \"LIGHTCYAN_EX\": \"\\033[96m\",\n        \"LIGHTWHITE_EX\": \"\\033[97m\",\n    }\n\n    COLOR256 = {\n        \"PURPLE\": \"\\033[38;5;129m\",\n        \"ORANGE\": \"\\033[38;5;202m\",\n        \"BROWN\": \"\\033[38;5;130m\",\n        \"OLIVE\": \"\\033[38;5;142m\",\n        \"GOLD\": \"\\033[38;5;214m\",\n        \"SILVER\": \"\\033[38;5;188m\",\n        \"MAROON\": \"\\033[38;5;52m\",\n        \"NAVY\": \"\\033[38;5;21m\",\n        \"TEAL\": \"\\033[38;5;29m\",\n        \"LIME\": \"\\033[38;5;118m\",\n        \"AQUA\": \"\\033[38;5;45m\",\n        \"FUSCHIA\": \"\\033[38;5;161m\",\n        \"PURPLE2\": \"\\033[38;5;98m\",\n        \"PLUM\": \"\\033[38;5;88m\",\n        \"INDIGO\": \"\\033[38;5;54m\",\n        \"TURQUOISE\": \"\\033[38;5;80m\",\n        \"STEEL_BLUE\": \"\\033[38;5;67m\",\n        \"ROSE\": \"\\033[38;5;210m\",\n        \"HOT_PINK\": \"\\033[38;5;200m\",\n        \"SALMON\": \"\\033[38;5;173m\",\n        \"CORAL\": \"\\033[38;5;203m\",\n        \"BEIGE\": \"\\033[38;5;230m\",\n        \"KHAKI\": \"\\033[38;5;143m\",\n        \"FOREST_GREEN\": \"\\033[38;5;34m\",\n        \"OLIVE_GREEN\": \"\\033[38;5;58m\",\n        \"LAVENDER\": \"\\033[38;5;183m\",\n        \"ORCHID\": \"\\033[38;5;170m\",\n        \"LILAC\": \"\\033[38;5;134m\",\n        \"SKY_BLUE\": \"\\033[38;5;117m\",\n        \"BABY_BLUE\": \"\\033[38;5;152m\",\n        \"POWDER_BLUE\": \"\\033[38;5;165m\",\n        \"SEA_GREEN\": \"\\033[38;5;27m\",\n        \"PALE_GREEN\": \"\\033[38;5;120m\",\n        \"SPRING_GREEN\": \"\\033[38;5;48m\",\n        \"MINT_GREEN\": \"\\033[38;5;121m\",\n        \"GRAY_BLUE\": \"\\033[38;5;103m\",\n        \"BLUE_GRAY\": \"\\033[38;5;104m\",\n    }\n\n    def __getattr__(self, name):\n        if name in self.ESCAPE_SEQ:\n            return self.ESCAPE_SEQ[name]\n        elif name in self.TEXT_COLORS:\n            return self.TEXT_COLORS[name]\n        elif name in self.LIGHT_COLORS:\n            return self.LIGHT_COLORS[name]\n        elif name in self.COLOR256:\n            return self.COLOR256[name]\n        else:\n            raise AttributeError\n\n    def notice(self):\n        return (\n            self.OKBLUE\n            + \"[\"\n            + self.ENDC\n            + self.OKGREEN\n            + \"notice\"\n            + self.OKBLUE\n            + \"]\"\n            + self.ENDC\n            + \" \"\n        )\n\n</code></pre>"},{"location":"commands/","title":"Class Commands","text":"<pre><code>\"\"\" Code module for generating content files \"\"\"\n\n\nclass Commands:\n    def __init__(self, **kwargs) -&gt; None:\n        self.kwargs = kwargs\n\n    def get_main_py(self):\n        return \"\"\"\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n        \"\"\"\n\n    def get_main_py(self):\n        return \"\"\"\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n        \"\"\"\n\n    def get_readme_md(self):\n        return \"\"\"\n</code></pre> <pre><code># {}\nA brief and descriptive title for your project.\n\n## Description\n\nA detailed description of the project, including its purpose, features, and any other relevant information.\n\n## Getting Started\n\n</code></pre> <pre><code>\ngit clone https://github.com/&lt;User Name Github&gt;/{}.git\n\ncd {}\n\n</code></pre> <pre><code>\n## Installation\n\n</code></pre> <pre><code>\n# create virtualenv auto name\n\nfenv onlyenv\n\n# install package in requirements.txt\n\nfenv install\n\n</code></pre> <pre><code>\n## Usage\n\nInstructions on how to use the project, including any usage examples and screenshots.\n\n## Tree\n&lt;!--- Start Tree ---&gt;\n</code></pre> <pre><code>.\n\u2514\u2500\u2500 {}/\n{}\n</code></pre> <pre><code>\n&lt;!--- End Tree ---&gt;\n\n## Contributing\n\nIf you would like to contribute to the project, include a section on how to do so, including any guidelines and best practices.\n\n## License\n\nInclude information about the license used for the project, such as the name of the license (e.g. MIT, Apache 2.0, etc.) and a link to the license text.\n\n\"\"\"\n\n    def get_requirements_txt(self):\n        return \"\"\"\n\nblack\nfenv\n\"\"\"\n</code></pre> <pre><code>\n    def get_update_tree_path(self):\n        return \"\"\"\n\n&lt;!--- Start Tree ---&gt;\n</code></pre> <pre><code>.\n\u2514\u2500\u2500 {}/\n{}\n</code></pre> <pre><code>\"\"\"\n</code></pre>"},{"location":"how-to-guides/","title":"How to guides","text":""},{"location":"how-to-guides/#installation","title":"Installation","text":"<p>To install Fenv, simply run the following command:</p> <pre><code>pip install fenv\n</code></pre>"},{"location":"how-to-guides/#usage","title":"Usage","text":"<p>Fenv makes it easy to get started with a new Python project by providing an all-in-one solution. Here's how to use it:</p>"},{"location":"how-to-guides/#create-a-new-project-with-virtualenv-and-basic-files","title":"Create a new project with virtualenv and basic files:","text":"<pre><code>fenv new &lt;project_folder&gt;\n</code></pre>"},{"location":"how-to-guides/#activate-the-virtual-environment","title":"Activate the virtual environment:","text":""},{"location":"how-to-guides/#for-windows","title":"for windows","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"how-to-guides/#for-linux","title":"for linux","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"how-to-guides/#command-for-windows-and-linux-only","title":"Command for windows and linux only","text":""},{"location":"how-to-guides/#install-packages","title":"Install packages","text":"<pre><code>fenv install\n</code></pre> <p>One command can be used to install packages from requirements.txt, and if Fenv's virtual environment does not exist, it will prompt the user to create it. However, an error message will be displayed if the requirements.txt file cannot be located.</p> <pre><code>fenv install &lt;package_name&gt;\n</code></pre> <p>Install the package and add it to requirements.txt If the package name is omitted, the message <code>Maybe you forgot to put the name of the package to install? for example fenv install &lt;package_name&gt;</code> is displayed.</p>"},{"location":"how-to-guides/#uninstall-packages","title":"Uninstall packages","text":"<pre><code>fenv uninstall &lt;package_name&gt;\n</code></pre> <p>Uninstall the package and delete it from requirements.txt</p>"},{"location":"how-to-guides/#update-requirementstxt","title":"Update requirements.txt","text":"<pre><code>fenv update &lt;package_name&gt;\n</code></pre> <p>Update all packages to a file. requirements.txt</p>"},{"location":"how-to-guides/#create-virtualenv-only","title":"Create virtualenv only","text":"<pre><code>fenv onlyenv\n</code></pre> <p>Create a virtualenv with a custom name or an optional 2 autoname, then create a file. settings.json for vscode does not generate additional base files</p>"},{"location":"how-to-guides/#cleanup-packages-all","title":"Cleanup packages all","text":"<pre><code>fenv clean\n</code></pre> <p>Clean, remove all packages like new.</p>"},{"location":"how-to-guides/#activate-the-virtual-environment_1","title":"Activate the virtual environment","text":"<pre><code>fenv activate\n</code></pre> <p>Activate the virtual environment if the terminal is not supported will show a hint.</p> <p><code>fenv deactivate</code> currently not in use</p>"},{"location":"manage_file/","title":"Class Manage File","text":"<p>Module manage create file</p>"},{"location":"manage_file/#fenv.manage_file.Cleanup","title":"Cleanup","text":"<pre><code>Cleanup()\n</code></pre> <p>         Bases: <code>CreateFileBaseAndUpdate</code></p> <p>Module for clean packages</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.colors = Colors()\n    self.notice = Colors().notice()\n    self.commands = Commands()\n    self.path_lib_all = EnvAll().get_path_lib_all()\n    self.lib_default_env = EnvAll().get_lib_default_env()\n    self.env_name = EnvAll().get_env_name()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.Cleanup.remove_lib_not_default_in_env","title":"remove_lib_not_default_in_env","text":"<pre><code>remove_lib_not_default_in_env()\n</code></pre> <p>Removes all the libraries that are not in the default environment</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def remove_lib_not_default_in_env(self):\n\"\"\"\n    Removes all the libraries that are not in the default environment\n    \"\"\"\n    data_lib_all = list(os.listdir(self.path_lib_all))\n    diff_list_1 = set(data_lib_all) - set(self.lib_default_env)\n    diff_list_2 = set(self.lib_default_env) - set(data_lib_all)\n    result = diff_list_1.union(diff_list_2)\n    os.chdir(self.path_lib_all)\n    if len(result) &gt; 0:\n        for item in result:\n            if os.path.isdir(item):\n                shutil.rmtree(item)\n            else:\n                os.remove(item)\n            print(\n                f\"{self.notice}{self.colors.SALMON}{item}{self.colors.ENDC} has been removed\"\n            )\n    os.chdir(\"../../..\")\n    print(\n        f\"{self.notice}{self.colors.SKY_BLUE}All the libraries have been removed.{self.colors.ENDC}\"\n    )\n    if platform.system() == \"Windows\":\n        os.system(\n            f\".\\env_{self.env_name }\\Scripts\\python.exe -m pip freeze &gt; requirements.txt\"\n        )\n        print(\n            f'{self.notice}{self.colors.SKY_BLUE}Successfully updated the file \"requirements.txt\"{self.colors.ENDC}'\n        )\n\n    elif platform.system() == \"Linux\":\n        os.system(\n            f\"bash -c 'source env_{self.env_name }/bin/activate  &amp;&amp; pip freeze &gt; requirements.txt'\"\n        )\n        print(\n            f'{self.notice}{self.colors.SKY_BLUE}Successfully updated the file \"requirements.txt\"{self.colors.ENDC}'\n        )\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate","title":"CreateFileBaseAndUpdate","text":"<pre><code>CreateFileBaseAndUpdate(name, state)\n</code></pre> Source code in <code>fenv\\manage_file.py</code> <pre><code>def __init__(self, name, state):\n    self.name = name\n    self.state = state\n    self.colors = Colors()\n    self.notice = Colors().notice()\n    self.commands = Commands()\n    self.env_directory = EnvAll().get_env_name()\n    self.root_directory = EnvAll().get_root_dir_name()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.create_file_freeze","title":"create_file_freeze","text":"<pre><code>create_file_freeze()\n</code></pre> <p>It creates a file called \"requirements.txt\" and writes the string \"black\" to it</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_file_freeze(self):\n\"\"\"\n    It creates a file called \"requirements.txt\" and writes the string \"black\" to it\n    \"\"\"\n    module_base = self.commands.get_requirements_txt()\n    with open(\"requirements.txt\", \"w\") as f:\n        f.write(module_base)\n    os.chmod(\"requirements.txt\", 0o777)\n    print(f'{self.notice}Successfully created the file \"requirements.txt\"')\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.create_file_gitignore","title":"create_file_gitignore","text":"<pre><code>create_file_gitignore()\n</code></pre> <p>It creates a file called .gitignore and writes the string \"*.pyc\" to it</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_file_gitignore(self):\n\"\"\"\n    It creates a file called .gitignore and writes the string \"*.pyc\" to it\n    \"\"\"\n    with open(\".gitignore\", \"w\") as f:\n        f.write(f\"*.pyc\\n/{self.env_directory}\")\n    os.chmod(\".gitignore\", 0o777)\n    print(f'{self.notice}Successfully created the file \".gitignore\"')\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.create_file_main_py","title":"create_file_main_py","text":"<pre><code>create_file_main_py()\n</code></pre> <p>Create a file main.py and write a function called main() inside of it</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_file_main_py(self):\n\"\"\"\n    Create a file main.py and write a function called main() inside of it\n    \"\"\"\n    self.file_path = \"main.py\"\n    with open(self.file_path, \"w\") as f:\n        f.write(self.commands.get_main_py())\n    os.chmod(self.file_path, 0o777)\n    print(f'{self.notice}Successfully created the file \"{self.file_path}\"')\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.create_file_readme_md","title":"create_file_readme_md","text":"<pre><code>create_file_readme_md()\n</code></pre> <p>It creates a file called readme.md and writes the markdown text to it</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_file_readme_md(self):\n\"\"\"\n    It creates a file called readme.md and writes the markdown text to it\n    \"\"\"\n    markdown_path = \"readme.md\"\n    markdown = self.commands.get_readme_md()\n    with open(markdown_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(\n            markdown.format(\n                self.name, self.name, self.name, self.name, self.generate_tree()\n            )\n        )\n    os.chmod(markdown_path, 0o777)\n    print(f'{self.notice}Successfully created the file \"{markdown_path}\"')\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.create_folder","title":"create_folder","text":"<pre><code>create_folder()\n</code></pre> <p>It creates a folder with the name of the argument passed to it</p> Example <pre><code>create_folder(\"project_name\")\n</code></pre> Return <p>1 : if has folder already</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_folder(self):\n\"\"\"\n    It creates a folder with the name of the argument passed to it\n\n    Example:\n        ```py\n        create_folder(\"project_name\")\n        ```\n    Return:\n        1 : if has folder already\n    \"\"\"\n    try:\n        os.mkdir(self.name)\n    except FileExistsError:\n        print(f\"{self.notice}{self.name} already exists.\")\n        return 1\n    else:\n        print(f'{self.notice}Successfully created the directory \"{self.name}\"')\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.create_setting_vscode","title":"create_setting_vscode","text":"<pre><code>create_setting_vscode()\n</code></pre> <p>It creates a file settings.json inside the virtual environment</p> <p>env_path (str): The path to the virtual environment</p> Example <pre><code>create_setting_vscode(\"env_path\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_setting_vscode(self):\n\"\"\"\n    It creates a file settings.json inside the virtual environment\n    Args:\n    env_path (str): The path to the virtual environment\n    Example:\n        ```py\n        create_setting_vscode(\"env_path\")\n        ```\n    Return:\n        None\n    \"\"\"\n\n    text_vscode = \"\"\"{{\"python.formatting.provider\": \"black\",\"python.pythonPath\": \"{name_env}\",\"editor.formatOnSave\": true,}}\"\"\"\n    os.makedirs(os.path.dirname(\".vscode/settings.json\"), exist_ok=True)\n    with open(\".vscode/settings.json\", \"w\", encoding=\"utf-8\") as f:\n        f.write(text_vscode.format(name_env=self.name))\n    print(f\"{self.notice}Successfully created the .vscode/settings.json\")\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.create_virtualenv","title":"create_virtualenv","text":"<pre><code>create_virtualenv()\n</code></pre> <p>It creates a virtual environment with the name you pass to it</p> <p>Parameters:</p> Name Type Description Default <code>virtual_env_name</code> <code>str</code> <p>The name of the virtual environment you want to create.</p> required Example <pre><code>create_virtualenv(\"virtual_env_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_virtualenv(self):\n\"\"\"\n    It creates a virtual environment with the name you pass to it\n\n    Args:\n      virtual_env_name (str): The name of the virtual environment you want to create.\n\n    Example:\n        ```py\n        create_virtualenv(\"virtual_env_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    if os.path.exists(self.name):\n        os.chdir(self.name)\n        print(f\"createing virtualenv env_{self.name}...\")\n        os.system(f\"virtualenv env_{self.name}\")\n        EnvAll().create_lib_default_env()\n\n    print(f'{self.notice}Successfully created the virtualenv \"{self.name}\"')\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.process_create_base_file_and_update","title":"process_create_base_file_and_update","text":"<pre><code>process_create_base_file_and_update()\n</code></pre> <p>If the state is create, create the files main.py, freeze.py, gitignore.py, and readme.md. If the state is update, update the file readme.md</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def process_create_base_file_and_update(self):\n\"\"\"\n    If the state is create, create the files main.py, freeze.py, gitignore.py, and readme.md. If the\n    state is update, update the file readme.md\n    \"\"\"\n    if self.state == \"create\":\n        self.create_file_main_py()\n        self.create_file_freeze()\n        self.create_file_gitignore()\n        self.create_file_readme_md()\n        self.update_file_readme_md()\n    elif self.state == \"update\":\n        self.update_file_readme_md()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.procress_only_create_project","title":"procress_only_create_project","text":"<pre><code>procress_only_create_project()\n</code></pre> <p>It creates a virtual environment and a vscode settings file.</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def procress_only_create_project(self):\n\"\"\"\n    It creates a virtual environment and a vscode settings file.\n    \"\"\"\n    if self.create_folder() != 1:\n        self.create_virtualenv()\n        self.create_setting_vscode()\n        self.process_create_base_file_and_update()\n        self.run_install_module_base()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.run_install_module_base","title":"run_install_module_base","text":"<pre><code>run_install_module_base()\n</code></pre> <p>It installs the base Python modules</p> <p>:param env: The environment object</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def run_install_module_base(self):\n\"\"\"\n    It installs the base Python modules\n\n    :param env: The environment object\n    \"\"\"\n\n    if platform.system() == \"Windows\":\n        self._extracted_from_run_install_module_base_9(\n            \".\\env_\",\n            \"\\Scripts\\python.exe -m pip install -r requirements.txt\",\n            \"\\Scripts\\python.exe -m pip freeze &gt; requirements.txt\",\n            \"\\Scripts\\python.exe -m pip install --upgrade pip\",\n        )\n    elif platform.system() == \"Linux\":\n        self._extracted_from_run_install_module_base_9(\n            \"bash -c 'source env_\",\n            \"/bin/activate  &amp;&amp; pip install -r requirements.txt'\",\n            \"/bin/activate  &amp;&amp; pip freeze &gt; requirements.txt'\",\n            \"/bin/activate  &amp;&amp; pip install --upgrade pip'\",\n        )\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.CreateFileBaseAndUpdate.update_file_readme_md","title":"update_file_readme_md","text":"<pre><code>update_file_readme_md()\n</code></pre> <p>It update a file called readme.md and writes the markdown text to it</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def update_file_readme_md(self):\n\"\"\"\n    It update a file called readme.md and writes the markdown text to it\n    \"\"\"\n    markdown_path = \"readme.md\"\n    with open(markdown_path, \"r\", encoding=\"utf-8\") as f:\n        data = f.readlines()\n\n    for i, v in enumerate(data):\n        if \"&lt;!--- Start Tree ---&gt;\" in v:\n            first = i\n\n        if \"&lt;!--- End Tree ---&gt;\" in v:\n            last = i\n\n    data = data[: first + 1] + data[last:]\n\n    for i, v in enumerate(data):\n        if \"&lt;!--- Start Tree ---&gt;\" in v:\n            data[i] = self.commands.get_update_tree_path().format(\n                self.name, self.generate_tree()\n            )\n    with open(markdown_path, \"w\", encoding=\"utf-8\") as f:\n        f.writelines(data)\n    os.chmod(markdown_path, 0o777)\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.InstallModule","title":"InstallModule","text":"<pre><code>InstallModule(arg=None)\n</code></pre> <p>Module install module</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def __init__(self, arg=None) -&gt; None:\n    self.package_name = arg\n    self.colors = Colors()\n    self.notice = Colors().notice()\n    self.commands = Commands()\n    self.env_directory = EnvAll().get_env_name()\n    self.root_directory = EnvAll().get_root_dir_name()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.InstallModule.add_module_to_txt","title":"add_module_to_txt","text":"<pre><code>add_module_to_txt()\n</code></pre> <p>It takes the argument from the command line and adds it to the requirements.txt file</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the script</p> required Example <pre><code>add_module_to_txt(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def add_module_to_txt(self):\n\"\"\"\n    It takes the argument from the command line and adds it to the requirements.txt file\n    Args:\n        args (str): The arguments passed to the script\n\n    Example:\n        ```py\n        add_module_to_txt(\"package_name\")\n        ```\n    Return:\n        None\n\n    \"\"\"\n    if self.env_directory:\n        if platform.system() == \"Windows\":\n            os.system(\n                f\".\\{self.env_directory}\\Scripts\\python.exe -m pip freeze &gt; requirements.txt\"\n            )\n        elif platform.system() == \"Linux\":\n            os.system(\n                f\"bash -c 'source {self.env_directory}/bin/activate  &amp;&amp; pip freeze &gt; requirements.txt'\"\n            )\n        print(\n            self.notice\n            + f'Successfully module {self.colors.PURPLE}{self.package_name.install}{self.colors.ENDC} added to \"{self.colors.SEA_GREEN}requirements.txt{self.colors.ENDC}\"'\n        )\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.InstallModule.install_package_all","title":"install_package_all","text":"<pre><code>install_package_all()\n</code></pre> <p>install all packages in requirements.txt file using pip install -r requirements.txt</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def install_package_all(self):\n\"\"\"\n    install all packages in requirements.txt file using pip install -r requirements.txt\n    \"\"\"\n\n    folder_name = \"env*\"\n    folder_name_env = (\n        fnmatch.filter(os.listdir(\".\"), folder_name)\n        if fnmatch.filter(os.listdir(\".\"), folder_name) == []\n        else str(fnmatch.filter(os.listdir(\".\"), folder_name)[0])\n    )\n    requirements_file = \"requirements.txt\"\n\n    def install_package_follow_env(folder_name_env):\n        if platform.system() == \"Windows\":\n            os.system(\n                f\".\\{folder_name_env}\\Scripts\\python.exe -m pip install -r requirements.txt\"\n            )\n        elif platform.system() == \"Linux\":\n            os.system(\n                f\"bash -c 'source {folder_name_env}/bin/activate &amp;&amp; pip install -r requirements.txt'\"\n            )\n\n    def run_install_main(folder_name_env):\n        if folder_name_env:\n            print(\n                f\"Found directory  `{self.colors.LIGHTGREEN_EX}{folder_name_env}{self.colors.ENDC}`\"\n            )\n            print(\n                f\"Installing modules with  `{self.colors.LIGHTGREEN_EX}{folder_name_env}{self.colors.ENDC}`\"\n            )\n            install_package_follow_env(folder_name_env)\n            print(\n                f'{self.notice}Successfully installed module from \"requirements.txt\"'\n            )\n        else:\n            while True:\n                response = input(\n                    \"We couldn't find the fenv virtual environment. Would you like to set up a new one? (y/n): \"\n                )\n                if response.lower() in [\"y\", \"yes\", \"\"]:\n                    OnlyVirtualEnv().run_process()\n                    folder_name = \"env*\"\n                    folder_name_env = str(\n                        fnmatch.filter(os.listdir(\".\"), folder_name)[0]\n                    )\n                    print(\n                        f\"Installing modules with  `{self.colors.LIGHTGREEN_EX}{folder_name_env}{self.colors.ENDC}`\"\n                    )\n                    install_package_follow_env(folder_name_env)\n                    print(\n                        f'{self.notice}Successfully installed modules from \"requirements.txt\"'\n                    )\n                    break\n                elif response.lower() == \"n\":\n                    os.system(\"pip install -r requirements.txt\")\n                    break\n\n    if requirements_file in os.listdir(\".\"):\n        run_install_main(folder_name_env)\n    else:\n        print(\n            f\"Maybe you forgot to put the name of the package to ininstall? for example `{self.colors.LIGHTGREEN_EX}fenv ininstall{self.colors.OKBLUE} &lt;package_name&gt;{self.colors.ENDC}` \\nOr you can use `{self.colors.LIGHTGREEN_EX}fenv ininstall{self.colors.ENDC}` alone. But there must be {self.colors.FAIL}{requirements_file}{self.colors.ENDC} in the current directory\"\n        )\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.InstallModule.install_package_only","title":"install_package_only","text":"<pre><code>install_package_only()\n</code></pre> <p>It tries to install a package, if it fails, it prints a message</p> <p>args (str): The arguments passed to the command.</p> Example <pre><code>install_package_only(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def install_package_only(self):\n\"\"\"\n    It tries to install a package, if it fails, it prints a message\n\n    Args:\n    args (str): The arguments passed to the command.\n    Example:\n        ```py\n        install_package_only(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    try:\n        if self.env_directory:\n            self.install_required_package()\n            self.add_module_to_txt()\n        else:\n            while True:\n                response = input(\n                    \"We couldn't find the fenv virtual environment. Would you like to set up a new one? (y/n): \"\n                )\n                if response.lower() in [\"y\", \"yes\", \"\"]:\n                    OnlyVirtualEnv().run_process()\n                    folder_name = \"env*\"\n                    folder_name_env = str(\n                        fnmatch.filter(os.listdir(\".\"), folder_name)[0]\n                    )\n                    self.install_required_package()\n                    break\n                elif response.lower() == \"n\":\n                    self.install_required_package()\n                    break\n    except AttributeError as err:\n        print(\n            self.colors.LIGHTGREEN_EX\n            + \"An error was encountered, it could not be installed.\"\n            + self.colors.ENDC\n        )\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.InstallModule.install_required_package","title":"install_required_package","text":"<pre><code>install_required_package()\n</code></pre> <p>It checks if the platform is Windows, if it is, it runs the command:</p> <p><code>.{self.env_directory}\\Scripts\\python.exe -m pip install {self.package_name.install}</code></p> <p>The problem is that it doesn't work</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def install_required_package(self):\n\"\"\"\n    It checks if the platform is Windows, if it is, it runs the command:\n\n    &lt;code&gt;.\\{self.env_directory}\\Scripts\\python.exe -m pip install\n    {self.package_name.install}&lt;/code&gt;\n\n    The problem is that it doesn't work\n    \"\"\"\n    print(\n        f\"{self.notice} Installing {self.colors.PURPLE}{self.package_name.install}{self.colors.ENDC}{self.colors.SEA_GREEN}\"\n    )\n    try:\n        if platform.system() == \"Windows\":\n            os.system(\n                rf\".\\{self.env_directory}\\Scripts\\python.exe -m pip install {self.package_name.install}\"\n            )\n            print(\n                f\"{self.notice}Successfully installed {self.colors.PURPLE}{self.package_name.install}{self.colors.ENDC}\"\n            )\n        elif platform.system() == \"Linux\":\n            os.system(\n                f\"bash -c 'source {self.env_directory}/bin/activate  &amp;&amp; pip install {self.package_name.install}'\"\n            )\n            print(\n                f\"{self.notice} Successfully installed {self.colors.PURPLE}{self.package_name.install}{self.colors.ENDC}\"\n            )\n\n    except TimeoutError as e:\n        print(e)\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.OnlyVirtualEnv","title":"OnlyVirtualEnv","text":"<pre><code>OnlyVirtualEnv()\n</code></pre> <p>Module create only env</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def __init__(self):\n    self.colors = Colors()\n    self.notice = Colors().notice()\n    self.commands = Commands()\n    self.env_directory = EnvAll().get_env_name()\n    self.root_directory = EnvAll().get_root_dir_name()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.OnlyVirtualEnv.create_name_env","title":"create_name_env","text":"<pre><code>create_name_env()\n</code></pre> <p>If the user enters a name for the virtualenv, the function will check if the name is in English only, if it is, it will return the name, if not, it will return a name automatically :return: The name of the virtual environment.</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_name_env(self) -&gt; str:\n\"\"\"\n    If the user enters a name for the virtualenv, the function will check if the name is in English\n    only, if it is, it will return the name, if not, it will return a name automatically\n    :return: The name of the virtual environment.\n    \"\"\"\n    self.name = input(\n        \"Enter a name for the virtualenv (english only) , leave it blank to create it automatically: \"\n    ).replace(\" \", \"_\")\n\n    if bool(re.match(\"^[A-Za-z0-9_#]+$\", self.name)):\n        return f\"{self.name[:10]}\"\n    else:\n        return self.create_name_env_auto()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.OnlyVirtualEnv.create_name_env_auto","title":"create_name_env_auto","text":"<pre><code>create_name_env_auto()\n</code></pre> <p>It creates a random name for the environment :return: A string</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_name_env_auto(self) -&gt; str:\n\"\"\"\n    &gt; It creates a random name for the environment\n    :return: A string\n    \"\"\"\n    self.name_ = random.choice([\"samai\", \"danai\"])\n    self.middle_ = random.choice(\"_#\")\n    self.no_ = random.randint(0, 100)\n    return f\"{self.name_}{self.middle_}{self.no_}\"\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.OnlyVirtualEnv.create_virtualenv_not_change_dir","title":"create_virtualenv_not_change_dir","text":"<pre><code>create_virtualenv_not_change_dir()\n</code></pre> <p>It creates a virtual environment with the name you pass to it</p> <p>Parameters:</p> Name Type Description Default <code>virtual_env_name</code> <code>str</code> <p>The name of the virtual environment you want to create.</p> required Example <pre><code>create_virtualenv(\"virtual_env_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def create_virtualenv_not_change_dir(self):\n\"\"\"\n    It creates a virtual environment with the name you pass to it\n\n    Args:\n      virtual_env_name (str): The name of the virtual environment you want to create.\n\n    Example:\n        ```py\n        create_virtualenv(\"virtual_env_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    if not os.path.exists(self._name_env):\n        print(f\"virtualenv env_{self._name_env}\")\n        os.system(f\"virtualenv env_{self._name_env}\")\n        EnvAll().create_lib_default_env()\n\n    print(f'{self.notice}Successfully created the virtualenv \"{self._name_env}\"')\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.OnlyVirtualEnv.run_process","title":"run_process","text":"<pre><code>run_process()\n</code></pre> <p>It creates a virtual environment and a vscode settings file.</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def run_process(self):\n\"\"\"\n    It creates a virtual environment and a vscode settings file.\n    \"\"\"\n    self._name_env = self.create_name_env()\n    print(\n        f\"your env name is `{self.colors.LIGHTGREEN_EX}{self._name_env}{self.colors.ENDC}`\"\n    )\n    self.create_virtualenv_not_change_dir()\n    CreateFileBaseAndUpdate(\n        os.path.basename(os.getcwd()), \"\"\n    ).create_setting_vscode()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.UninstallModule","title":"UninstallModule","text":"<pre><code>UninstallModule(arg)\n</code></pre> Source code in <code>fenv\\manage_file.py</code> <pre><code>def __init__(self, arg) -&gt; None:\n    self.package_name = arg\n    self.colors = Colors()\n    self.notice = Colors().notice()\n    self.commands = Commands()\n    self.env_directory = EnvAll().get_env_name()\n    self.root_directory = EnvAll().get_root_dir_name()\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.UninstallModule.cmd_uninstall_package","title":"cmd_uninstall_package","text":"<pre><code>cmd_uninstall_package()\n</code></pre> <p>It uninstalls a package from the virtual environment</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>str</code> <p>The arguments passed to the command</p> required Example <pre><code>cmd_uninstall_package(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def cmd_uninstall_package(self):\n\"\"\"\n    It uninstalls a package from the virtual environment\n\n    Args:\n        args (str): The arguments passed to the command\n    Example:\n        ```py\n        cmd_uninstall_package(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n\n    try:\n        package_dependency_list = self.pip_show_to_dict()[\"Requires\"].split(\", \")\n        print(f\"{self.notice}Uninstalling...{self.colors.ORANGE}\")\n        if platform.system() == \"Windows\":\n            os.system(\n                f\".\\{self.env_directory}\\Scripts\\python.exe -m pip uninstall {self.package_name.uninstall} -y\"\n            )\n            for i in package_dependency_list:\n                os.system(\n                    f\".\\{self.env_directory}\\Scripts\\python.exe -m pip uninstall {i} -y\"\n                )\n\n        elif platform.system() == \"Linux\":\n            os.system(\n                f\"bash -c 'source {self.env_directory}/bin/activate &amp;&amp; pip uninstall {self.package_name.uninstall} -y'\"\n            )\n            for i in package_dependency_list:\n                os.system(\n                    f\"bash -c 'source {self.env_directory}/bin/activate &amp;&amp; pip uninstall {i} -y'\"\n                )\n        print(\n            self.notice\n            + f\"Successfully uninstalled module {self.colors.LIGHTGREEN_EX}{self.package_name.uninstall}{self.colors.ENDC}\"\n        )\n    except TimeoutError:\n        print(TimeoutError)\n</code></pre>"},{"location":"manage_file/#fenv.manage_file.UninstallModule.process_run","title":"process_run","text":"<pre><code>process_run()\n</code></pre> <p>\"A function that is called when the user runs the command \"uninstall\".\"</p> <p>The first line of the function is a docstring. It's a string that describes what the function does. It's a good idea to include a docstring for every function you write</p> <p>args (str): The arguments passed to the command</p> Example <pre><code>process_run(\"package_name\")\n</code></pre> Return <p>None</p> Source code in <code>fenv\\manage_file.py</code> <pre><code>def process_run(self):\n\"\"\"\n    \"A function that is called when the user runs the command \"uninstall\".\"\n\n    The first line of the function is a docstring. It's a string that describes what the function does.\n    It's a good idea to include a docstring for every function you write\n\n    Args:\n    args (str): The arguments passed to the command\n    Example:\n        ```py\n        process_run(\"package_name\")\n        ```\n    Return:\n        None\n    \"\"\"\n    try:\n        self.cmd_uninstall_package()\n        self.remove_module_exit_txt()\n    except AttributeError as err:\n        print(err, \"An error was encountered, it could not be uninstalled.\")\n</code></pre>"},{"location":"state_env/","title":"Class State Environment","text":"<p>Module for open a virtual environment and clsoe the virtual environment</p>"},{"location":"state_env/#fenv.state_env.StateEnv","title":"StateEnv","text":""},{"location":"state_env/#fenv.state_env.StateEnv.activate","title":"activate","text":"<pre><code>activate()\n</code></pre> <p>Method to activate a virtual environment</p> Source code in <code>fenv\\state_env.py</code> <pre><code>def activate(self):\n\"\"\"Method to activate a virtual environment\"\"\"\n\n    IS_POWER_SHELL = len(os.getenv(\"PSModulePath\", \"\").split(os.pathsep)) &gt;= 3\n    IS_LINUX_OR_WSL = os.path.exists(\"/proc/sys/kernel/osrelease\")\n\n    if ENV_NAME:\n        if os_win:\n            if IS_POWER_SHELL:\n                subprocess.run(\n                    [\n                        \"powershell.exe\",\n                        \"-NoExit\",\n                        \"-Command\",\n                        rf\".\\{path_env_win}\\activate\",\n                    ],\n                )\n            elif os.environ.get(\"TERM\") == \"xterm-256color\":\n                subprocess.run(\n                    [\n                        \"cmd.exe\",\n                        \"/c\",\n                        rf\".\\{path_env_win}\\activate.bat\",\n                    ]\n                )\n            else:\n                print(\n                    f\"It cannot be enabled, but you can run it using the \\n {colors.SPRING_GREEN}`{ENV_NAME}\\\\Scripts\\\\activate`{colors.ENDC} command\"\n                )\n\n        elif os_linux:\n            if EnvAll().get_terminal_bash():\n                if IS_LINUX_OR_WSL:\n                    subprocess.run(\n                        [\n                            \"bash.exe\",\n                            \"-c\",\n                            rf\".\\{path_env_win}\\activate\",\n                        ],\n                    )\n                    print(\n                        f\"Virtual environment {colors.NAVY}{colors.SPRING_GREEN}{ENV_NAME}{colors.ENDC} is enabled\"\n                    )\n                else:\n                    subprocess.run(\n                        [\n                            \"bash\",\n                            \"-c\",\n                            rf\".\\{path_env_win}\\activate\",\n                        ],\n                    )\n                    print(\n                        f\"Virtual environment {colors.NAVY}{colors.SPRING_GREEN}{ENV_NAME}{colors.ENDC} is enabled\"\n                    )\n    else:\n        print(\n            f\"Virtual environment {colors.NAVY}{colors.SPRING_GREEN}{ENV_NAME}{colors.ENDC} is not enabled because it does not exist\"\n        )\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#fenv-new-project_folder","title":"<code>fenv new [project_folder]</code>","text":"<p>Create a new project and create virtualenv with base file such <code>settings.json</code> on vscode and <code>main.py</code></p>"},{"location":"tutorials/#fenv-install","title":"<code>fenv install</code>","text":"<p>Install all modules in requirements.txt is similar to <code>npm install</code>.</p>"},{"location":"tutorials/#fenv-install-package_name","title":"<code>fenv install &lt;package_name&gt;</code>","text":"<p>Install the modules you want to install. After the installation is complete add the module name to the file. automatic requirements.txt</p>"},{"location":"tutorials/#fenv-uninstall-package_name","title":"<code>fenv uninstall &lt;package_name&gt;</code>","text":"<p>Uninstall the modules you want to uninstall. After the uninstallation is complete add the module name to the file. automatic requirements.txt</p>"},{"location":"tutorials/#fenv-onlyenv","title":"<code>fenv onlyenv</code>","text":"<p>Create a virtualenv with settings to connect the interpreter to vscode and format the code with black.</p>"},{"location":"tutorials/#fenv-clean","title":"<code>fenv clean</code>","text":"<p>Clean, remove all packages like new.</p>"},{"location":"tutorials/#fenv-activate","title":"<code>fenv activate</code>","text":"<p>Activate the virtual environment if the terminal is not supported will show a hint.</p> <p>Support Currently:</p> <ul> <li>Powershell (Windows)</li> <li>WSL (Windows)</li> </ul>"},{"location":"th/","title":"Fenv (\u0e40\u0e1f\u0e19\u0e27\u0e35)","text":"<p>Fenv \u0e40\u0e1b\u0e47\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e17\u0e35\u0e48\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e08\u0e30\u0e0a\u0e48\u0e27\u0e22\u0e04\u0e38\u0e13\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e41\u0e25\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e14\u0e49\u0e27\u0e22 Fenv \u0e04\u0e38\u0e13\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e47\u0e01\u0e15\u0e4c\u0e43\u0e2b\u0e21\u0e48\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e20\u0e32\u0e22\u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e19\u0e31\u0e49\u0e19 \u0e41\u0e25\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19\u0e44\u0e14\u0e49\u0e43\u0e19\u0e04\u0e23\u0e32\u0e27\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e43\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Python \u0e2b\u0e25\u0e32\u0e22\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e1a\u0e48\u0e2d\u0e22\u0e46 \u0e41\u0e25\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e08\u0e23\u0e34\u0e07</p>"},{"location":"th/#_1","title":"\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34","text":"<ul> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e21\u0e48\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27</li> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27\u0e20\u0e32\u0e22\u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23</li> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Python \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19</li> <li>\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e43\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Python \u0e2b\u0e25\u0e32\u0e22\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23</li> <li>\u0e40\u0e1e\u0e34\u0e48\u0e21 <code>black</code> \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a python</li> <li>\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e25\u0e30\u0e16\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e25\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e25\u0e07\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c <code>requirements.txt</code> \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e46\u0e01\u0e31\u0e19\u0e43\u0e19\u0e40\u0e27\u0e25\u0e32\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19</li> </ul>"},{"location":"th/#_2","title":"\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07","text":"<pre><code>pip install fenv\n</code></pre> <p>or</p> <pre><code>pip install --upgrade fenv\n</code></pre>"},{"location":"th/#_3","title":"\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07","text":"<pre><code>$ fenv -h\n\nUsage:\n  fenv [options] &lt;command&gt;\n\nCommands:\n\n    new       Create a new project\n    install   Install packages\n    uninstall Uninstall packages\n    update    Update packages to file requirements.txt\n    onlyenv   Create only virtualenv and no create base file\n\nGeneral Options:\n  -h, --help  Show this help message and exit\n\n</code></pre>"},{"location":"th/#_4","title":"\u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07","text":"<pre><code>|_ .vscode/\n|    |_ settings.json\n|\n|_ env_name/\n|    |_ Lib\n|    |_ Scripts\n|    |_ .gitignore\n|    |_ pyvenv\n|\n|_ main.py\n|_ readme.md\n|_ requirements.txt\n</code></pre>"},{"location":"th/#_5","title":"\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07","text":"<p>\u0e43\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Fenv \u0e40\u0e1e\u0e35\u0e22\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e19\u0e35\u0e49:</p> <pre><code>pip install fenv\n</code></pre>"},{"location":"th/#_6","title":"\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19","text":"<p>Fenv \u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Python \u0e43\u0e2b\u0e21\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e07\u0e48\u0e32\u0e22\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e42\u0e0b\u0e25\u0e39\u0e0a\u0e31\u0e19\u0e41\u0e1a\u0e1a all-in-one \u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19:</p>"},{"location":"th/#virtualenv","title":"\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e21\u0e48\u0e1e\u0e23\u0e49\u0e2d\u0e21 virtualenv \u0e41\u0e25\u0e30\u0e44\u0e1f\u0e25\u0e4c\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19:","text":"<pre><code>fenv new &lt;project_folder&gt;\n</code></pre>"},{"location":"th/#_7","title":"\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e08\u0e23\u0e34\u0e07:","text":""},{"location":"th/#for-windows","title":"for windows","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"th/#for-linux","title":"for linux","text":"<pre><code>cd project_folder\nsource env/bin/activate\n</code></pre>"},{"location":"th/#windows","title":"\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Windows \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19","text":""},{"location":"th/#_8","title":"\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08","text":"<pre><code>fenv install &lt;package_name&gt;\n</code></pre> <p>\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e41\u0e25\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e25\u0e07\u0e43\u0e19 requirement.txt \u0e2b\u0e32\u0e01\u0e44\u0e21\u0e48\u0e43\u0e2a\u0e48\u0e0a\u0e37\u0e48\u0e2d\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08 \u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21 <code>Maybe you forgot to put the name of the package to install? for example fenv install &lt;package_name&gt;</code> \u0e08\u0e30\u0e1b\u0e23\u0e32\u0e01\u0e0f\u0e02\u0e36\u0e49\u0e19</p>"},{"location":"th/#_9","title":"\u0e16\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08","text":"<pre><code>fenv uninstall &lt;package_name&gt;\n</code></pre> <p>\u0e16\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e41\u0e25\u0e30\u0e25\u0e1a\u0e2d\u0e2d\u0e01\u0e08\u0e32\u0e01 requirement.txt</p>"},{"location":"th/#requirementstxt","title":"\u0e2d\u0e31\u0e1b\u0e40\u0e14\u0e15 requirements.txt","text":"<pre><code>fenv update &lt;package_name&gt;\n</code></pre> <p>\u0e2d\u0e31\u0e1b\u0e40\u0e14\u0e15\u0e41\u0e1e\u0e47\u0e04\u0e40\u0e01\u0e08\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e25\u0e07\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c requirement.txt</p>"},{"location":"th/#virtualenv_1","title":"\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e04\u0e48 virtualenv \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19","text":"<pre><code>fenv onlyenv\n</code></pre> <p>\u0e2a\u0e23\u0e49\u0e32\u0e07 virtualenv \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e40\u0e2d\u0e07\u0e2b\u0e23\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 2 \u0e15\u0e31\u0e27\u0e40\u0e25\u0e37\u0e2d\u0e01 \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c settings.json \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a vscode \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e43\u0e2b\u0e49</p>"}]}